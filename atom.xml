<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangba&#39;s blogs</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-19T09:12:15.601Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangba</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot中自定义异常</title>
    <link href="http://yoursite.com/2020/08/19/SpringBoot%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2020/08/19/SpringBoot%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/</id>
    <published>2020-08-19T09:11:17.000Z</published>
    <updated>2020-08-19T09:12:15.601Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、正常出现异常"><a href="#一、正常出现异常" class="headerlink" title="一、正常出现异常"></a>一、正常出现异常</h2><p>Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/diyError&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;diyError&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819140914.png" alt="image-20200819140914040"></p><blockquote><p>可以看见此错误页是 SpringBoot 提供的，由于我们没有提供 /error 页面，顺便展示我们出现的错误</p></blockquote><h2 id="二、静态页面异常"><a href="#二、静态页面异常" class="headerlink" title="二、静态页面异常"></a>二、静态页面异常</h2><p>在 <code>static</code> 目录下新建一个 <code>error</code> 目录，并在其中新建 404.html 和 500.html：</p><p><code>404.html:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code> 500.html：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>500<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次访问 <a href="http://localhost:8080/diyError">http://localhost:8080/diyError</a></p><p>可以看见已经进入自定义的静态页面了：<br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819142425.png" alt="image-20200819142425408"></p><p>再访问一个不存在的页面：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819142448.png" alt="image-20200819142448711"></p><blockquote><p>注：也可以只定义  4xx.html 与 5xx.html 的静态页面，只要发生 400-499 的状态码或者 500-599 的状态码就对应 4xx.html 与 5xx.html 的结果</p></blockquote><h2 id="三、动态页面异常"><a href="#三、动态页面异常" class="headerlink" title="三、动态页面异常"></a>三、动态页面异常</h2><p>引入 thymeleaf 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>templates</code> 目录下新建一个 <code>error</code> 目录，并在其中新建 404.html、 500.html、 4xx.html、5xx.html ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819144108.png" alt="image-20200819144108160"></p><p>再次访问 <a href="http://localhost:8080/diyError">http://localhost:8080/diyError</a></p><p>可以看见已经进入自定义的动态页面了：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819144234.png" alt="image-20200819144234652"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819144308.png" alt="image-20200819144308646"></p><blockquote><p>优先级：</p><ul><li>如果有 404 的页面，会先找 404.html；如果没有就会找 4xx.html</li><li>如果动态页面和静态页面同时存在，会优先使用动态页面</li></ul><p>完整顺序大概如下：</p><p>发生了500错误 –&gt; 查找动态 500.html 页面 –&gt; 查找静态 500.html  –&gt; 查找动态 5xx.html –&gt; 查找静态 5xx.html</p></blockquote><h2 id="四、SpringBoot-怎么自动配置"><a href="#四、SpringBoot-怎么自动配置" class="headerlink" title="四、SpringBoot 怎么自动配置"></a>四、SpringBoot 怎么自动配置</h2><p>关键类：<code>ErrorMvcAutoConfiguration</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorViewResolverConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">   DefaultErrorViewResolverConfiguration(ApplicationContext applicationContext,</span><br><span class="line">         ResourceProperties resourceProperties) &#123;</span><br><span class="line">      <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">      <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnBean(DispatcherServlet.class)</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean(ErrorViewResolver.class)</span></span><br><span class="line">  <span class="comment">// 默认的错误视图解析器 DefaultErrorViewResolver</span></span><br><span class="line">   <span class="function">DefaultErrorViewResolver <span class="title">conventionErrorViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorViewResolver(<span class="keyword">this</span>.applicationContext, <span class="keyword">this</span>.resourceProperties);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在默认的错误视图解析器 <code>DefaultErrorViewResolver</code> 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">   ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">   <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">      modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果 modelAndView 为空，即没找到对应的具体 404.html，就会用 SERIES_VIEWS.containsKey(status.series())      找 4xx.html </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">   String errorViewName = <span class="string">&quot;error/&quot;</span> + viewName;</span><br><span class="line">   TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line">         <span class="keyword">this</span>.applicationContext);</span><br><span class="line">   <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>判断 error 文件夹下面是否有对应的状态码的文档</li><li>再判断是否有动态页面，即 TemplateAvailabilityProvider</li><li>如果是动态页面，就返回动态页面；否则返回静态页面</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolveResource</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (String location : <span class="keyword">this</span>.resourceProperties.getStaticLocations()) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Resource resource = <span class="keyword">this</span>.applicationContext.getResource(location);</span><br><span class="line">         resource = resource.createRelative(viewName + <span class="string">&quot;.html&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> HtmlResourceView(resource), model);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、自定义异常数据"><a href="#五、自定义异常数据" class="headerlink" title="五、自定义异常数据"></a>五、自定义异常数据</h2><p>在 <code>ErrorMvcAutoConfiguration</code> 中，处理异常数据的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultErrorAttributes <span class="title">errorAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorAttributes();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>DefaultErrorAttributes()</code> 中通过设置参数得到相应的结果</p><p>例如：将 error 中的 5xx.html 改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>5xx<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>path<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>error<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>message<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>timestamp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;timestamp&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>status<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>trace<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;trace&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时仔运行结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819162419.png" alt="image-20200819162419826"></p><p>再看一下使 <code>DefaultErrorAttributes</code> 生效的条件：</p><blockquote><p>@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</p></blockquote><p>所以只要我们自定义 <code>ErrorAttributes.class</code> 就可以实现自己定义的异常数据处理</p><p>自定义 ErrorAttributes 有两种方式 ：</p><ol><li>直接实现 ErrorAttributes 接口</li><li>继承 DefaultErrorAttributes（推荐），因为 DefaultErrorAttributes 中对异常数据的处理已经完成，开发者可以直接使用。</li></ol><p>新建一个配置类继承 <code>DefaultErrorAttributes</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorConfig</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = <span class="keyword">super</span>.getErrorAttributes(webRequest, options);</span><br><span class="line">        errorAttributes.put(<span class="string">&quot;myerror&quot;</span>, <span class="string">&quot;自定义异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 5xx.html 中加入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>myerror<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myerror&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：可以看到此时的自定义的 error 已经加入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合JSON</title>
    <link href="http://yoursite.com/2020/08/18/SpringBoot%E6%95%B4%E5%90%88JSON/"/>
    <id>http://yoursite.com/2020/08/18/SpringBoot%E6%95%B4%E5%90%88JSON/</id>
    <published>2020-08-18T13:01:28.000Z</published>
    <updated>2020-08-18T13:02:11.667Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Jackson"><a href="#一、Jackson" class="headerlink" title="一、Jackson"></a>一、Jackson</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><p>只要加入普通的 Web 依赖就行，为了方便依然引入 Lombok 和 热部署</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817142417.png" alt="image-20200817142417630"></p><p>打开 Maven 依赖可以看见</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817142731.png" alt="image-20200817142731779"></p><blockquote><p>SpringBoot 自带的就是 jackson</p></blockquote><h3 id="2-SpringBoot中使用"><a href="#2-SpringBoot中使用" class="headerlink" title="2. SpringBoot中使用"></a>2. SpringBoot中使用</h3><p>2.1 建立实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2  Controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(i);</span><br><span class="line">            user.setName(<span class="string">&quot;wang&quot;</span> + i);</span><br><span class="line">            user.setAddress(<span class="string">&quot;shanghai&quot;</span> + i);</span><br><span class="line">            user.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.3 结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817144557.png" alt="image-20200817144557760"></p><h3 id="3-深入了解-Springboot-中的-JSON-转换"><a href="#3-深入了解-Springboot-中的-JSON-转换" class="headerlink" title="3. 深入了解 Springboot 中的 JSON 转换"></a>3. 深入了解 Springboot 中的 JSON 转换</h3><p>思考：</p><ol><li><p>前端传入的 json 数据如何被解析成 Java 对象作为 API入参</p></li><li><p>API 返回结果又如何将 Java 对象解析成 json 格式数据返回给前端</p></li></ol><p>关键类：<code>HttpMessageConverter</code></p><blockquote><p>官方原话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.</span><br></pre></td></tr></table></figure></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817150036.png" alt="image-20200817150036913"></p><p>从 Structure 中可以看见一共有五个方法：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817150448.png" alt="image-20200817150448857"></p><p>canRead：接收到请求时判断是否能读</p><p>canWrite：返回结果时判断是否能写</p><p>getSupportedMediaTypes：获取支持的 MediaType</p><p>read：能读则读</p><p>write：能写则写</p><blockquote><p>注：在前面我们没有写任何配置也能实现转换，是由于其中有缺省配置</p><p>可以在 <code>WebMvcConfigurationSupport </code> 中查看</p></blockquote><h3 id="4-自定义-JSON-配置"><a href="#4-自定义-JSON-配置" class="headerlink" title="4.自定义 JSON 配置"></a>4.自定义 JSON 配置</h3><p>方式一：在需要转换的属性上加上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817152735.png" alt="image-20200817152735887"></p><p>方式二：</p><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MappingJackson2HttpMessageConverter <span class="title">mappingJackson2HttpMessageConverter</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MappingJackson2HttpMessageConverter converter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd-HH:mm:ss&quot;</span>));</span><br><span class="line">        converter.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817154209.png" alt="image-20200817154209854"></p><p>使用下面的配置类也可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter () &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();</span></span><br><span class="line"><span class="comment">//        ObjectMapper objectMapper = new ObjectMapper();</span></span><br><span class="line"><span class="comment">//        objectMapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd-HH:mm:ss&quot;));</span></span><br><span class="line"><span class="comment">//        converter.setObjectMapper(objectMapper);</span></span><br><span class="line"><span class="comment">//        return converter;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ObjectMapper <span class="title">objectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817154533.png" alt="image-20200817154533630"></p><h3 id="5-Gson-和-Fastjson"><a href="#5-Gson-和-Fastjson" class="headerlink" title="5.Gson 和 Fastjson"></a>5.Gson 和 Fastjson</h3><p>如果想要和 Jackson 一样自定义配置：</p><p>只需要配置：<code>GsonHttpMessageConverter</code> 和 <code>FastJsonHttpMessageConverter</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
    <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ControllerAdvice注解的使用</title>
    <link href="http://yoursite.com/2020/08/18/ControllerAdvice%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/08/18/ControllerAdvice%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-18T13:00:09.000Z</published>
    <updated>2020-08-18T13:01:00.283Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、用法"><a href="#一、用法" class="headerlink" title="一、用法"></a>一、用法</h2><ol><li>处理全局异常</li><li>预设全局数据</li><li>请求参数预处理</li></ol><h2 id="二、处理全局异常"><a href="#二、处理全局异常" class="headerlink" title="二、处理全局异常"></a>二、处理全局异常</h2><p>我们只需要在 <strong>application.properties</strong>中配置：spring.servlet.multipart.max-file-size=1KB</p><p>就可以看见在上传图片时就会报 500 异常：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818200228.png" alt="image-20200818200222467"></p><p>此时我们可以自己自定义处理 这种异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(MaxUploadSizeExceededException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myException</span><span class="params">(MaxUploadSizeExceededException e, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;上传大小限制为1KB&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、预设全局数据"><a href="#三、预设全局数据" class="headerlink" title="三、预设全局数据"></a>三、预设全局数据</h2><p>设置全局变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute(value = &quot;data&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">map</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;wangyi&quot;</span>, <span class="string">&quot;王一&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;wangba&quot;</span>, <span class="string">&quot;王八&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取出设置的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = model.asMap();</span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s + <span class="string">&quot;:&quot;</span> + map.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818203200.png" alt="image-20200818203200239"></p><h2 id="四、请求参数预处理"><a href="#四、请求参数预处理" class="headerlink" title="四、请求参数预处理"></a>四、请求参数预处理</h2><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">book</span><span class="params">(Book book, Author author)</span> </span>&#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(author);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Postman 进行测试：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818204743.png" alt="image-20200818204743394"></p><p>得到最终结果为：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818204824.png" alt="image-20200818204824095"></p><p>当出现相同参数时，并不能分清楚参数属于哪个对象，只能将参数赋值给每一个拥有相同参数的对象</p><p>处理：</p><p>Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">book</span><span class="params">(<span class="meta">@ModelAttribute(&quot;b&quot;)</span> Book book,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="meta">@ModelAttribute(&quot;a&quot;)</span> Author author)</span> </span>&#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(author);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder(&quot;a&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initA</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">&quot;a.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder(&quot;b&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initB</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">&quot;b.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Postman 进行测试：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818205810.png" alt="image-20200818205810853"></p><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818205832.png" alt="image-20200818205832096"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch入门</title>
    <link href="http://yoursite.com/2020/08/12/ElasticSearch%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/08/12/ElasticSearch%E5%85%A5%E9%97%A8/</id>
    <published>2020-08-12T07:02:23.000Z</published>
    <updated>2020-08-12T07:40:52.851Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、参考链接"><a href="#一、参考链接" class="headerlink" title="一、参考链接"></a>一、参考链接</h2><p><a href="https://www.elastic.co/cn/">01.ES官网</a></p><p><a href="http://www.iocoder.cn/Spring-Boot/Elasticsearch/">02.Spring Boot Elasticsearch 入门</a></p><p><a href="http://www.iocoder.cn/Fight/Schematic-Elasticsearch-principle/">03.图解 Elasticsearch 原理</a></p><h2 id="二、ElasticSearch概述"><a href="#二、ElasticSearch概述" class="headerlink" title="二、ElasticSearch概述"></a>二、ElasticSearch概述</h2><h2 id="三、Solr和ElasticSearch的对比"><a href="#三、Solr和ElasticSearch的对比" class="headerlink" title="三、Solr和ElasticSearch的对比"></a>三、Solr和ElasticSearch的对比</h2><h2 id="四、ElasticSearch安装"><a href="#四、ElasticSearch安装" class="headerlink" title="四、ElasticSearch安装"></a>四、ElasticSearch安装</h2><h2 id="五、Kibana安装"><a href="#五、Kibana安装" class="headerlink" title="五、Kibana安装"></a>五、Kibana安装</h2><h3 id="5-1-下载"><a href="#5-1-下载" class="headerlink" title="5.1 下载"></a>5.1 下载</h3><blockquote><p><a href="https://www.elastic.co/cn/downloads/kibana">Kibana官方下载地址</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151628.png" alt="image-20200728094906706"></p><p>注：可以在<a href="https://www.elastic.co/downloads/past-releases#kibana">past releases</a>下载老版本</p></blockquote><h3 id="5-2-运行"><a href="#5-2-运行" class="headerlink" title="5.2 运行"></a>5.2 运行</h3><p>解压后进入bin目录运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kibana</span><br></pre></td></tr></table></figure><p>在浏览器打开：</p><p><a href="http://localhost:5601/">http://localhost:5601/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151656.png" alt="image-20200728095343130"></p><h3 id="5-3-汉化"><a href="#5-3-汉化" class="headerlink" title="5.3 汉化"></a>5.3 汉化</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151708.png" alt="image-20200728095941769"></p><p>zh-CN.json是Kibana的汉化包</p><p>再到 kibana.yml 中加入：<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151717.png" alt="image-20200728100108546"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151725.png" alt="image-20200728100208569"></p><h2 id="六、ElasticSearch核心概念"><a href="#六、ElasticSearch核心概念" class="headerlink" title="六、ElasticSearch核心概念"></a>六、ElasticSearch核心概念</h2><h3 id="6-1-与关系型数据库对比"><a href="#6-1-与关系型数据库对比" class="headerlink" title="6.1 与关系型数据库对比"></a>6.1 与关系型数据库对比</h3><blockquote><p><strong>elasticsearch是面向文档，关系型数据库和 elasticsearch 客观的对比！一切都是JSON</strong></p></blockquote><table><thead><tr><th align="center">MySQL</th><th align="center">ElasticSearch</th></tr></thead><tbody><tr><td align="center">数据库（database）</td><td align="center">索引（index）</td></tr><tr><td align="center">表（tables）</td><td align="center">类型（types）</td></tr><tr><td align="center">ES</td><td align="center">文档（documents）</td></tr><tr><td align="center">列（columns）</td><td align="center">字段（fields）</td></tr></tbody></table><p><code>注：</code>其中 types 逐渐被弃用了，8.X将被删除</p><h3 id="6-2-一个🌰："><a href="#6-2-一个🌰：" class="headerlink" title="6.2 一个🌰："></a>6.2 一个🌰：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151826.png" alt="image-20200728102741475"></p><p>对应上面数据库：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152319.png" alt="image-20200728110933851"></p><h3 id="6-3-设计"><a href="#6-3-设计" class="headerlink" title="6.3 设计"></a>6.3 设计</h3><p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包含多个文档(行)，每个文档中又包含多个字段(列)。</p><p><strong>物理设计：</strong></p><p>elasticsearch 在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移 </p><p>一个人就是一个集群！默认的集群名称就是 elaticsearh</p><p>参考以下：</p><ol><li>云上的集群<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152124.png" alt="image-20200728104645355"></li><li>集群里的盒子<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152218.png" alt="image-20200728104717763"></li><li>节点之间<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152227.png" alt="image-20200728104728531"></li><li>索引里的小方块<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152234.png" alt="image-20200728104741324"></li></ol><p>在 ElasticSearch head 中可以看见默认集群的名字为：<code>elasticsearch</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152244.png" alt="image-20200728105040312"></p><p><strong>逻辑设计：</strong></p><p>一个索引类型中，包含多个文档，比如说文档1，文档2。 当我们索引一篇文档时，可以通过这样的顺序找到它: </p><blockquote><p><code>索引 ----&gt; 类型 ----&gt; 文档ID </code></p></blockquote><p>通过这个组合我们就能索引到某个具体的文档。 注意：ID不必是整数，实际上它是个字符串。</p><h3 id="6-4-文档"><a href="#6-4-文档" class="headerlink" title="6.4 文档"></a>6.4 文档</h3><p>就是我们的<code>一条数据</code></p><p>之前说elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch 中，文档有几个重要属性 :</p><ul><li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含 key：value！</li><li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！就是一个json对象！</li></ul><p>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用， 在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</p><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符串也可以是整型。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型 。</p><h3 id="6-5-类型"><a href="#6-5-类型" class="headerlink" title="6.5 类型"></a>6.5 类型</h3><p>​        类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射， 比如 name 映射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段， 比如新增一个字段，那么elasticsearch是怎么做的呢？elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整型。 但是elasticsearch也可能猜不对， 所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用。</p><h3 id="6-6-索引"><a href="#6-6-索引" class="headerlink" title="6.6 索引"></a>6.6 索引</h3><p>就是<code>数据库</code></p><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。 然后它们被存储到了各个分片上了。 我们来研究下分片是如何工作的。</p><p>一个集群至少有一个节点，而一个节点就是一个elasricsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片 ( primary shard ,又称主分片 ) 构成的，每一个主分片会有一个副本 ( replica shard ,又称复制分片 )</p><p>在 ElasticSearch head 中可以看见刚建立的索引是5个分片：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152341.png" alt="image-20200728111430420"></p><h3 id="6-7-倒排"><a href="#6-7-倒排" class="headerlink" title="6.7 倒排"></a>6.7 倒排</h3><p>elasticsearch使用的是一种称为倒排索引的结构，采用Lucene倒排索作为底层。这种结构适用于快速的全文搜索， 一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例 如，现在有两个文档， 每个文档包含如下内容：</p><blockquote><p>Study every day, good good up to forever           # 文档1包含的内容<br>To forever, study every day, good good up          # 文档2包含的内容</p></blockquote><p>为了创建倒排索引，我们首先要将每个文档拆分成独立的词(或称为词条或者tokens)，然后创建一个包含所有不重 复的词条的排序列表，然后列出每个词条出现在哪个文档</p><table><thead><tr><th align="center">term</th><th align="center">doc_1</th><th align="center">doc_2</th></tr></thead><tbody><tr><td align="center">Study</td><td align="center">√</td><td align="center">X</td></tr><tr><td align="center">To</td><td align="center">X</td><td align="center">√</td></tr><tr><td align="center">every</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">forever</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">day</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">study</td><td align="center">X</td><td align="center">√</td></tr><tr><td align="center">good</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">every</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">to</td><td align="center">√</td><td align="center">X</td></tr><tr><td align="center">up</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><p>现在，我们试图搜索 to forever，只需要查看包含每个词条的文档 <code>score</code></p><table><thead><tr><th align="center">term</th><th align="center">doc_1</th><th align="center">doc_2</th></tr></thead><tbody><tr><td align="center">to</td><td align="center">√</td><td align="center">X</td></tr><tr><td align="center">forever</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">total</td><td align="center">2</td><td align="center">1</td></tr></tbody></table><p>如果没有别的条件，现在，这两个包含关键字的文档都将返回。</p><p>在elasticsearch中， 索引 （库）这个词被频繁使用，这就是术语的使用。 在elasticsearch中，索引被分为多个分片，每份分片是一个Lucene的索引。所以一个elasticsearch索引是由多个Lucene索引组成的。别问为什么，谁让elasticsearch使用Lucene作为底层呢! 如无特指，说起索引都是指elasticsearch 的索引。</p><p>关系图：</p><blockquote><p>一个 ES 索引 —–&gt; 多个分片(shard)</p><p>​                                       一个分片(shard) —–&gt; 一个 Lucene 索引</p><p>一个 ES 索引 —–&gt; —–&gt; 多个 Lucene 索引</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152359.png" alt="image-20200728131631335"></p><h2 id="七、IK分词器"><a href="#七、IK分词器" class="headerlink" title="七、IK分词器"></a>七、IK分词器</h2><h3 id="7-1-分词"><a href="#7-1-分词" class="headerlink" title="7.1 分词"></a>7.1 分词</h3><p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个 词，比如 “我是王八” 会被分为”我”、“是”、“王”、“八”，这显然是不符合要求的，所以我们需要安装中文分词器 IK 来解决这个问题。</p><p>IK 提供了两个分词算法：ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word为最细粒度划分！</p><h3 id="7-2-下载安装"><a href="#7-2-下载安装" class="headerlink" title="7.2 下载安装"></a>7.2 下载安装</h3><p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">IK 分词器下载</a></p><p>安装：解压后放入 plugins 文件夹下</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152413.png" alt="image-20200728133942367"></p><p>重启 ElasticSearch ：看到 IK 分词器已经加载到 ES 里面了</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152418.png" alt="image-20200728134131159"></p><h3 id="7-3-IK-分词器的小🌰："><a href="#7-3-IK-分词器的小🌰：" class="headerlink" title="7.3 IK 分词器的小🌰："></a>7.3 IK 分词器的小🌰：</h3><p>使用 ik_smart 算法：  <code>最少切分</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152424.png" alt="image-20200728135216813"></p><p>使用 ik_max_word 算法：    <code>最细粒度划分</code>：通过字典，找寻所有符合的情况</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152432.png" alt="image-20200728135308880"></p><h3 id="7-4-自行-DIY-字典"><a href="#7-4-自行-DIY-字典" class="headerlink" title="7.4 自行 DIY 字典"></a>7.4 自行 DIY 字典</h3><p>在出现以下情况时：我们需要的是 <code>神魔恋</code> 应该是一个词语，而不应该被分词为 <code>神魔</code> 与 <code>恋</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152455.png" alt="image-20200728140135869"></p><p>在 IK 的 config 目录下，配置 wangba.dic 和 IKAnalyzer.cfg.xml 如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152536.png" alt="image-20200728144840034"></p><p><code>IKAnalyzer.cfg.xml：</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152547.png" alt="image-20200728145037806"></p><p><code>wangba.dic:</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152556.png" alt="image-20200728145105415"></p><p>重启 ES 和 Kibana：已经可以看见 wangba.dic 已经加载进去了</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152607.png" alt="image-20200728144452860"></p><p>此时在Kibana中可以看见：此时 <code>神魔恋</code> 已经是一个词了</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152614.png" alt="image-20200728145311150"></p><h2 id="八、Rest风格"><a href="#八、Rest风格" class="headerlink" title="八、Rest风格"></a>八、Rest风格</h2><h3 id="8-1-Rest命令说明说明"><a href="#8-1-Rest命令说明说明" class="headerlink" title="8.1 Rest命令说明说明"></a>8.1 Rest命令说明说明</h3><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交 互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>基本Rest命令说明：</p><table><thead><tr><th align="center"><strong>method</strong></th><th align="center">url地址</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">PUT</td><td align="center">localhost:9200/索引名称/类型名称/文档id</td><td align="center">创建文档（指定文档id）</td></tr><tr><td align="center">POST</td><td align="center">localhost:9200/索引名称/类型名称</td><td align="center">创建文档（随机文档id）</td></tr><tr><td align="center">_update</td><td align="center">localhost:9200/索引名称/类型名称/文档id/_update</td><td align="center">修改文档</td></tr><tr><td align="center">DELETE</td><td align="center">localhost:9200/索引名称/类型名称/文档id</td><td align="center">删除文档</td></tr><tr><td align="center">GET</td><td align="center">localhost:9200/索引名称/类型名称/文档id</td><td align="center">查询文档通过文档id</td></tr><tr><td align="center">POST</td><td align="center">localhost:9200/索引名称/类型名称/_search</td><td align="center">查询所有数据</td></tr></tbody></table><h3 id="8-2-基本测试"><a href="#8-2-基本测试" class="headerlink" title="8.2 基本测试"></a>8.2 基本测试</h3><p>创建索引：</p><blockquote><p>PUT /索引名称/<del><code>类型名称</code></del>/文档id</p><p>{</p><p>​            请求体</p><p>}</p><p>注：类型即将被弃用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152625.png" alt="image-20200728151356309"></p><p>在 ES head 中可以看见数据已经插入成功：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152637.png" alt="image-20200728151727329"></p><h3 id="8-3-类型"><a href="#8-3-类型" class="headerlink" title="8.3 类型"></a>8.3 类型</h3><table><thead><tr><th align="center"><strong>字符串类型</strong></th><th align="center"><strong>text 、 keyword</strong></th></tr></thead><tbody><tr><td align="center"><strong>数值类型</strong></td><td align="center">long、integer、 short、byte、double、float、half_float、 scaled_float</td></tr><tr><td align="center"><strong>日期类型</strong></td><td align="center">date</td></tr><tr><td align="center"><strong>布尔值类型</strong></td><td align="center">boolean</td></tr><tr><td align="center"><strong>二进制类型</strong></td><td align="center">binary</td></tr></tbody></table><p>自定义类型：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152919.png" alt="image-20200728153315700"></p><p>通过 GET 请求可以看见 test2 索引的信息：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152926.png" alt="image-20200728153419852"></p><p>自动匹配类型：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153010.png" alt="image-20200728154312363"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153017.png" alt="image-20200728154429831"></p><h3 id="8-4-关于索引的基本操作"><a href="#8-4-关于索引的基本操作" class="headerlink" title="8.4 关于索引的基本操作"></a>8.4 关于索引的基本操作</h3><blockquote><p>增加：如上</p><p>查询：如上</p></blockquote><blockquote><p>修改：如下</p></blockquote><p>方法一：直接覆盖</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153031.png" alt="image-20200728155827534"></p><p>可以看见 version 发生了改变</p><p>方法二：</p><blockquote><p>POST /索引名称/_doc/文档id/__update</p><p>{</p><p>​            请求体</p><p>}</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153102.png" alt="image-20200728160513999"></p><p>可以看见 version 再次发生了改变</p><blockquote><p>删除</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153148.png" alt="image-20200728161148536"></p><h3 id="8-5-关于文档的基本操作"><a href="#8-5-关于文档的基本操作" class="headerlink" title="8.5 关于文档的基本操作"></a>8.5 关于文档的基本操作</h3><p><code>基本操作：</code></p><blockquote><p>增加数据    PUT</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153158.png" alt="image-20200729085012520"></p><blockquote><p>查询数据    GET</p></blockquote><p>方式一：简单的 ID 查询</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153226.png" alt="image-20200729085341564"></p><p>可以看见，推荐使用 <code>GET /索引/_doc/文档ID</code> 来进行操作</p><p>方式二：简单的条件查询</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153621.png" alt="image-20200729091400956"></p><p>可以看见 <code>type</code> 已经被丢弃了</p><blockquote><p>更新数据    POST</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153609.png" alt="image-20200729090204208"></p><p>可以看见，推荐使用 <code>POST /索引/_update/文档ID</code> 来进行操作</p><blockquote><p><code>复杂操作：</code>select (排序、分页、高亮、模糊查询、精准查询 )</p></blockquote><blockquote><p>查询</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153640.png" alt="image-20200729092702190"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153648.png" alt="image-20200729093150116"></p><p>ES 中有 <code>zhangsan</code> 和 <code>zhangshan 008</code> ，通过关键字<code>zhangsan</code> 查询，会将分词后的结果全部查询出来，且每一个都是有 <code>_score</code> 的。</p><blockquote><p>hits：在Java可以得到索引和文档的信息、查询的结果总数、具体文档数据信息（可以通过遍历得到具体的各种信息）</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153700.png" alt="image-20200729094426031"></p><blockquote><p>通过 <code>_source</code> 来指定最后的输出结果</p></blockquote><blockquote><p>排序</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153709.png" alt="image-20200729095730668"></p><blockquote><p>通过 <code>sort</code> 进行排序，用 <code>desc</code> 和 <code>asc</code> 来进行降序和升序</p></blockquote><blockquote><p>分页    /search/{current}/{pagesize}</p></blockquote><p>第一页一个数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153722.png" alt="image-20200729100357807"></p><p>第二页的一个数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153731.png" alt="image-20200729100512315"></p><p>第一页的两个数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153738.png" alt="image-20200729100615639"></p><blockquote><p>bool 值查询</p></blockquote><p><code>must 命令</code> ==  and</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153749.png" alt="image-20200729101211913"></p><p><code>should 命令</code> == or</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153757.png" alt="image-20200729102255051"></p><p>两个都查询到了</p><p><code>must_not 命令</code> ==  not</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153807.png" alt="image-20200729102630406"></p><p><code>filter 命令</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153820.png" alt="image-20200729103629498"></p><blockquote><p>gt：大于  / gte：大于等于 / lt：小于 / lte：小于等于</p></blockquote><p><code>匹配多个条件</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153836.png" alt="image-20200729104255294"></p><p>直接在 <code>tags</code> 中加空格</p><p><code>精确查询</code></p><p>term 查询是直接通过倒排索引指定的词条进行精确的查询</p><ul><li><p>term：直接查询精确的</p></li><li><p>match：使用分词器解析（先分析文档，在通过分析的文档进行查询）</p></li></ul><p>两个类型：</p><p><code>text：</code> 会被分词解析器解析</p><p><code>keyword： </code> 不会被分词解析器解析</p><p>使用 keywod 分词器：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153858.png" alt="image-20200729112314281"></p><p>使用 standard 分词器：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153906.png" alt="image-20200729112353845"></p><p><code>text：</code> 可以看见下面被分词了，所以出现了两个结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153915.png" alt="image-20200729112831873"></p><p><code>keyword： </code> 可以看见下面没有被分词</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153925.png" alt="image-20200729113003169"></p><blockquote><p>高亮查询</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153934.png" alt="image-20200729122744294"></p><h2 id="九、SpringBoot集成ElasticSearch"><a href="#九、SpringBoot集成ElasticSearch" class="headerlink" title="九、SpringBoot集成ElasticSearch"></a>九、SpringBoot集成ElasticSearch</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.6/java-rest-high.html">官方 ES Client 文档</a></p><p>1.依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.找对象</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153948.png" alt="image-20200729134909854"></p><p>3.分析类中方法</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812154043.png" alt="image-20200729140717144"></p><p>ES 的版本与本机中的版本不一致 </p><p>自行配置 SpringBoot 中的 ES 版本</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812154036.png" alt="image-20200729141538339"></p><p><code>RestClientAutoConfiguration</code> 和 <code>RestClientProperties</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812154019.png" alt="image-20200729143842388"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure.elasticsearch.rest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.AuthScope;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.Credentials;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.UsernamePasswordCredentials;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.CredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.BasicCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.PropertyMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestClientConfigurations</span> </span>&#123;</span><br><span class="line">    RestClientConfigurations() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">  <span class="comment">// RestClient  普通客户端</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClientFallbackConfiguration</span> </span>&#123;</span><br><span class="line">        RestClientFallbackConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="function">RestClient <span class="title">elasticsearchRestClient</span><span class="params">(RestClientBuilder builder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> builder.build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(&#123;RestHighLevelClient.class&#125;)</span></span><br><span class="line">  <span class="comment">// RestHighLevelClient  高级客户端</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RestHighLevelClientConfiguration</span> </span>&#123;</span><br><span class="line">        RestHighLevelClientConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="function">RestHighLevelClient <span class="title">elasticsearchRestHighLevelClient</span><span class="params">(RestClientBuilder restClientBuilder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="function">RestClient <span class="title">elasticsearchRestClient</span><span class="params">(RestClientBuilder builder, ObjectProvider&lt;RestHighLevelClient&gt; restHighLevelClient)</span> </span>&#123;</span><br><span class="line">            RestHighLevelClient client = (RestHighLevelClient)restHighLevelClient.getIfUnique();</span><br><span class="line">            <span class="keyword">return</span> client != <span class="keyword">null</span> ? client.getLowLevelClient() : builder.build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">  <span class="comment">// RestClientBuilder</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClientBuilderConfiguration</span> </span>&#123;</span><br><span class="line">        RestClientBuilderConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="function">RestClientBuilder <span class="title">elasticsearchRestClientBuilder</span><span class="params">(RestClientProperties properties, ObjectProvider&lt;RestClientBuilderCustomizer&gt; builderCustomizers)</span> </span>&#123;</span><br><span class="line">            HttpHost[] hosts = (HttpHost[])properties.getUris().stream().map(HttpHost::create).toArray((x$<span class="number">0</span>) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HttpHost[x$<span class="number">0</span>];</span><br><span class="line">            &#125;);</span><br><span class="line">            RestClientBuilder builder = RestClient.builder(hosts);</span><br><span class="line">            PropertyMapper map = PropertyMapper.get();</span><br><span class="line">            map.from(properties::getUsername).whenHasText().to((username) -&gt; &#123;</span><br><span class="line">                CredentialsProvider credentialsProvider = <span class="keyword">new</span> BasicCredentialsProvider();</span><br><span class="line">                Credentials credentials = <span class="keyword">new</span> UsernamePasswordCredentials(properties.getUsername(), properties.getPassword());</span><br><span class="line">                credentialsProvider.setCredentials(AuthScope.ANY, credentials);</span><br><span class="line">                builder.setHttpClientConfigCallback((httpClientBuilder) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            builder.setRequestConfigCallback((requestConfigBuilder) -&gt; &#123;</span><br><span class="line">                properties.getClass();</span><br><span class="line">                map.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis).to(requestConfigBuilder::setConnectTimeout);</span><br><span class="line">                properties.getClass();</span><br><span class="line">                map.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis).to(requestConfigBuilder::setSocketTimeout);</span><br><span class="line">                <span class="keyword">return</span> requestConfigBuilder;</span><br><span class="line">            &#125;);</span><br><span class="line">            builderCustomizers.orderedStream().forEach((customizer) -&gt; &#123;</span><br><span class="line">                customizer.customize(builder);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> builder;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、索引、文档-API-操作"><a href="#十、索引、文档-API-操作" class="headerlink" title="十、索引、文档 API 操作"></a>十、索引、文档 API 操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wangba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.wangba.enity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.util.QueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.MatchAllQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.TermQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.FetchSourceContext;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.ls.LSOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootEsApiApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;restHighLevelClient&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 创建索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建索引请求</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 让客户端执行请求 indicesClient</span></span><br><span class="line">        CreateIndexResponse createIndexResponse = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(createIndexResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 查询索引</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">existIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">      System.out.println(exists);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 删除索引</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">      DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">      AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">      System.out.println(delete);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span>: 添加文档 PUT test/_doc/1</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 创建对象</span></span><br><span class="line">      User user = <span class="keyword">new</span> User(<span class="string">&quot;wangba&quot;</span>, <span class="number">25</span>);</span><br><span class="line">      <span class="comment">// 创建请求</span></span><br><span class="line">      IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">      <span class="comment">// 规则：  ==&gt;   PUT test/_doc/1</span></span><br><span class="line">      request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">      request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">      <span class="comment">// 将我们的数据放入请求中   JSON格式</span></span><br><span class="line">      request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">      <span class="comment">// 客户端发送请求，返回结果</span></span><br><span class="line">        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(indexResponse);</span><br><span class="line">        System.out.println(indexResponse.toString());</span><br><span class="line">        System.out.println(indexResponse.status());   <span class="comment">// 对应的状态就是 CREATED 等</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 文档是否存在</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">existDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// GET test/_doc/1</span></span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="comment">// _source 不显示上下文</span></span><br><span class="line">        request.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">        request.storedFields(<span class="string">&quot;_none_&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> exists = client.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 查询文档数据  GET test/_doc/1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        GetResponse documentFields = client.get(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(documentFields.getSourceAsString());</span><br><span class="line">        System.out.println(documentFields);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 更新文档</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;zhansan&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        request.doc(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">        UpdateResponse update = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(update);</span><br><span class="line">        System.out.println(update.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 删除文档  DELETE test/_doc/1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DeleteResponse delete = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(delete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 批处理请求</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBulkDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;User&gt; userArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userArrayList.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">5</span>));</span><br><span class="line">        userArrayList.add(<span class="keyword">new</span> User(<span class="string">&quot;lisi&quot;</span>, <span class="number">10</span>));</span><br><span class="line">        userArrayList.add(<span class="keyword">new</span> User(<span class="string">&quot;xiaoxin&quot;</span>, <span class="number">25</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userArrayList.size(); i++) &#123;</span><br><span class="line">            bulkRequest.add(</span><br><span class="line">                    <span class="keyword">new</span> IndexRequest(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                    .id(<span class="string">&quot;&quot;</span>+(i+<span class="number">1</span>))</span><br><span class="line">                    .source(JSON.toJSONString(userArrayList.get(i)), XContentType.JSON)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BulkResponse bulk = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(bulk);</span><br><span class="line">        System.out.println(bulk.status());</span><br><span class="line">        System.out.println(bulk.hasFailures());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 按条件搜索</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        查询：</span></span><br><span class="line"><span class="comment">        SearchRequest          搜索请求</span></span><br><span class="line"><span class="comment">        SearchSourceBuilder    条件构造</span></span><br><span class="line"><span class="comment">        HighlightBuilder       高亮构造</span></span><br><span class="line"><span class="comment">        TermQueryBuilder       精确查询</span></span><br><span class="line"><span class="comment">        MatchAllQueryBuilder   所有查询</span></span><br><span class="line"><span class="comment">        // xxxBuilder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">searchDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建搜索请求</span></span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造搜索条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">// QueryBuilders.termQuery 精确查询</span></span><br><span class="line">        <span class="comment">// QueryBuilders.matchAllQuery 查询所有</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(&quot;age&quot;, &quot;25&quot;);</span></span><br><span class="line">        <span class="comment">//searchSourceBuilder.query(termQueryBuilder);</span></span><br><span class="line"></span><br><span class="line">        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span><br><span class="line">        searchSourceBuilder.query(matchAllQueryBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        <span class="comment">// searchSourceBuilder.from();</span></span><br><span class="line">        <span class="comment">// searchSourceBuilder.size();</span></span><br><span class="line"></span><br><span class="line">        searchSourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">        SearchResponse search = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(JSON.toJSONString(search.getHits()));</span><br><span class="line">        System.out.println(<span class="string">&quot;+++++++++++++我是分割线++++++++++++++&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit documentFields : search.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、实战"><a href="#十一、实战" class="headerlink" title="十一、实战"></a>十一、实战</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="ES" scheme="http://yoursite.com/tags/ES/"/>
    
  </entry>
  
</feed>
