<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>铁氏王朝满汉全席 919</title>
      <link href="/2020/09/15/%E9%93%81%E6%B0%8F%E7%8E%8B%E6%9C%9D%E6%BB%A1%E6%B1%89%E5%85%A8%E5%B8%AD-919/"/>
      <url>/2020/09/15/%E9%93%81%E6%B0%8F%E7%8E%8B%E6%9C%9D%E6%BB%A1%E6%B1%89%E5%85%A8%E5%B8%AD-919/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 align=center>919 铁氏王朝满汉全席 v1.3</h1><h2 id="清蒸大闸蟹-5只"><a href="#清蒸大闸蟹-5只" class="headerlink" title="清蒸大闸蟹  5只"></a>清蒸大闸蟹  5只</h2><blockquote><p>材料：</p></blockquote><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>阳澄湖大闸蟹</td><td><a href="https://www.douguo.com/caipu/%E7%94%9F%E5%A7%9C">生姜</a></td></tr><tr><td><a href="https://www.douguo.com/caipu/%E8%92%9C%E7%93%A3">蒜瓣</a></td><td><a href="https://www.douguo.com/caipu/%E9%A6%99%E8%91%B1">香葱</a></td></tr><tr><td><a href="https://www.douguo.com/caipu/%E7%B4%AB%E8%8B%8F">紫苏</a></td><td><a href="https://www.douguo.com/caipu/%E7%94%9F%E6%8A%BD">生抽</a></td></tr><tr><td><a href="https://www.douguo.com/caipu/%E9%A6%99%E9%86%8B">香醋</a></td><td><a href="https://www.douguo.com/caipu/%E6%96%99%E9%85%92">料酒</a></td></tr><tr><td><a href="https://www.douguo.com/caipu/%E9%A6%99%E6%B2%B9">香油</a></td><td><a href="https://www.douguo.com/caipu/%E9%B8%A1%E7%B2%BE">鸡精</a></td></tr><tr><td><a href="https://www.douguo.com/caipu/%E7%B3%96">糖</a></td><td></td></tr></tbody></table><h2 id="可乐鸡翅"><a href="#可乐鸡翅" class="headerlink" title="可乐鸡翅"></a>可乐鸡翅</h2><blockquote><p>材料：</p></blockquote><table><thead><tr><th><a href="https://www.douguo.com/caipu/%E9%B8%A1%E7%BF%85">鸡翅</a>10个</th><th><a href="https://www.douguo.com/caipu/%E5%8F%AF%E4%B9%90">可乐</a>300毫升</th></tr></thead><tbody><tr><td><a href="https://www.douguo.com/caipu/%E8%80%81%E6%8A%BD">老抽</a>1勺</td><td>盐，鸡精适量</td></tr><tr><td>葱姜，八角适量</td><td></td></tr></tbody></table><h2 id="糖醋排骨"><a href="#糖醋排骨" class="headerlink" title="糖醋排骨"></a>糖醋排骨</h2><blockquote><p>材料：</p></blockquote><table><thead><tr><th><a href="https://www.douguo.com/caipu/%E7%8C%AA%E8%82%8B%E6%8E%92">猪肋排</a>500克</th><th><a href="https://www.douguo.com/caipu/%E8%91%B1">葱</a>适量</th></tr></thead><tbody><tr><td><a href="https://www.douguo.com/caipu/%E5%A7%9C">姜</a>适量</td><td><a href="https://www.douguo.com/caipu/%E5%85%AB%E8%A7%92">八角</a>2个</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E8%80%81%E6%8A%BD">老抽</a>2勺</td><td><a href="https://www.douguo.com/caipu/%E7%94%9F%E6%8A%BD">生抽</a>2勺</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E7%99%BD%E7%B3%96">白糖</a>3勺</td><td><a href="https://www.douguo.com/caipu/%E9%A6%99%E9%86%8B">香醋</a>4勺</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E6%96%99%E9%85%92">料酒</a>5勺</td><td><a href="https://www.douguo.com/caipu/%E7%86%9F%E7%99%BD%E8%8A%9D%E9%BA%BB">熟白芝麻</a>适量</td></tr></tbody></table><h2 id="麻辣小龙虾"><a href="#麻辣小龙虾" class="headerlink" title="麻辣小龙虾"></a>麻辣小龙虾</h2><blockquote><p>材料：</p></blockquote><table><thead><tr><th><a href="https://www.douguo.com/caipu/%E5%B0%8F%E9%BE%99%E8%99%BE">小龙虾</a>30斤</th><th><a href="https://www.douguo.com/caipu/%E9%A6%99%E8%91%B1">香葱</a>适量</th></tr></thead><tbody><tr><td><a href="https://www.douguo.com/caipu/%E5%A7%9C">姜</a>适量</td><td><a href="https://www.douguo.com/caipu/%E8%92%9C">蒜</a>适量</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E5%A4%A7%E8%91%B1">大葱</a>适量</td><td><a href="https://www.douguo.com/caipu/%E6%A1%82%E7%9A%AE">桂皮</a>适量</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E5%85%AB%E8%A7%92">八角</a>适量</td><td><a href="https://www.douguo.com/caipu/%E9%A6%99%E5%8F%B6">香叶</a>适量</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E7%B4%AB%E8%8B%8F">紫苏</a>适量</td><td><a href="https://www.douguo.com/caipu/%E5%B0%8F%E7%B1%B3%E6%A4%92">小米椒</a>适量</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E5%86%B0%E7%B3%96">冰糖</a>适量</td><td>藕条适量</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E9%9D%92%E6%A4%92">青椒</a>适量</td><td>红油火锅底料适量</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E8%B1%86%E7%93%A3%E9%85%B1">豆瓣酱</a>适量</td><td><a href="https://www.douguo.com/caipu/%E6%B7%80%E7%B2%89">淀粉</a>适量</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E7%99%BD%E8%8A%9D%E9%BA%BB">白芝麻</a>适量</td><td></td></tr></tbody></table><h2 id="芝士培根泡菜卷"><a href="#芝士培根泡菜卷" class="headerlink" title="芝士培根泡菜卷"></a>芝士培根泡菜卷</h2><blockquote><p>材料：</p></blockquote><h2 id="蒜蓉金针菇"><a href="#蒜蓉金针菇" class="headerlink" title="蒜蓉金针菇"></a>蒜蓉金针菇</h2><blockquote><p>材料：</p></blockquote><table><thead><tr><th><a href="https://www.douguo.com/caipu/%E9%87%91%E9%92%88%E8%8F%87">金针菇</a>1把</th><th><a href="https://www.douguo.com/caipu/%E8%92%9C">蒜</a>一头</th></tr></thead><tbody><tr><td><a href="https://www.douguo.com/caipu/%E9%A3%9F%E7%94%A8%E6%B2%B9">食用油</a>适量</td><td><a href="https://www.douguo.com/caipu/%E9%85%B1%E6%B2%B9">酱油</a>4勺</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E8%9A%9D%E6%B2%B9">蚝油</a>2勺</td><td><a href="https://www.douguo.com/caipu/%E5%B0%8F%E8%91%B1">小葱</a>4根</td></tr><tr><td><a href="https://www.douguo.com/caipu/%E9%B8%A1%E7%B2%BE">鸡精</a>适量</td><td><a href="https://www.douguo.com/caipu/%E7%B3%96">糖</a></td></tr><tr><td><a href="https://www.douguo.com/caipu/%E7%9B%90">盐</a></td><td></td></tr></tbody></table><h2 id="酒酿小汤圆冲鸡蛋"><a href="#酒酿小汤圆冲鸡蛋" class="headerlink" title="酒酿小汤圆冲鸡蛋"></a>酒酿小汤圆冲鸡蛋</h2><blockquote><p>材料：</p></blockquote><h2 id="姜撞奶"><a href="#姜撞奶" class="headerlink" title="姜撞奶"></a>姜撞奶</h2><blockquote><p>材料：</p></blockquote><table><thead><tr><th><a href="https://www.douguo.com/caipu/%E8%80%81%E5%A7%9C">老姜</a>1大块</th><th><a href="https://www.douguo.com/caipu/%E7%BA%AF%E7%89%9B%E5%A5%B6">纯牛奶</a>200毫升</th></tr></thead><tbody><tr><td><a href="https://www.douguo.com/caipu/%E7%BB%86%E7%A0%82%E7%B3%96">细砂糖</a>适量</td><td><a href="https://www.douguo.com/caipu/%E8%94%93%E8%B6%8A%E8%8E%93%E5%B9%B2">蔓越莓干</a>少许</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> CookBook </tag>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Spring Data JPA 之多条件搜索工具类</title>
      <link href="/2020/09/14/SpringBoot%E6%95%B4%E5%90%88Spring-Data-JPA-%E4%B9%8B%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2020/09/14/SpringBoot%E6%95%B4%E5%90%88Spring-Data-JPA-%E4%B9%8B%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、OverView"><a href="#一、OverView" class="headerlink" title="一、OverView"></a>一、OverView</h2><p>​        在前面已经介绍过了 <a href="http://wangba.me/2020/09/10/SpringBoot%E6%95%B4%E5%90%88Spring-Data-JPA-%E4%BA%8C/">SpringBoot 整合 JPA </a>了，但是一般在公司业务中，如果出现很多次多条件搜索查询的情况，那么就会用大量冗余代码了；再结合注解的思想。本次将公共部分提取出来，并用注解的方式进行操作，可以参考前面使用<a href="http://wangba.me/2020/09/03/SpringBoot%E6%95%B4%E5%90%88AOP/">注解进行 AOP 处理日志</a>，也符合了 SpringBoot 的思想。</p><h2 id="二、BaseQuery"><a href="#二、BaseQuery" class="headerlink" title="二、BaseQuery"></a>二、BaseQuery</h2><p><code>QueryWord</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> QueryWord &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库中字段名,默认为空字符串,则Query类中的字段要与数据库中字段一致</span></span><br><span class="line">    <span class="function">String <span class="title">column</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// equal, like, gt, lt...</span></span><br><span class="line">    <span class="function">MatchType <span class="title">func</span><span class="params">()</span> <span class="keyword">default</span> MatchType.equal</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// object是否可以为null</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">nullable</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串是否可为空</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// between...and... 查询语句标识， 0时间  1数字类型</span></span><br><span class="line">    <span class="function">BetweenType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> BetweenType.datetime</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：注解类，只要在要查询的属性上加上相应的注解即可</p></blockquote><p><code>MatchType</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MatchType &#123;</span><br><span class="line"></span><br><span class="line">    equal,                 <span class="comment">// filed = value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面四个用于Number类型的比较</span></span><br><span class="line">    gt,                     <span class="comment">// filed &gt; value</span></span><br><span class="line">    ge,                     <span class="comment">// field &gt;= value</span></span><br><span class="line">    lt,                     <span class="comment">// field &lt; value</span></span><br><span class="line">    le,                     <span class="comment">// field &lt;= value</span></span><br><span class="line"></span><br><span class="line">    notEqual,               <span class="comment">// field != value</span></span><br><span class="line">    like,                   <span class="comment">// field like value</span></span><br><span class="line">    notLike,                <span class="comment">// field not like value</span></span><br><span class="line">    between,                <span class="comment">// between value1 and value2 ,Type is Date</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面四个用于可比较类型(Comparable)的比较</span></span><br><span class="line">    greaterThan,            <span class="comment">// field &gt; value</span></span><br><span class="line">    greaterThanOrEqualTo,   <span class="comment">// field &gt;= value</span></span><br><span class="line">    lessThan,               <span class="comment">// field &lt; value</span></span><br><span class="line">    lessThanOrEqualTo       <span class="comment">// field &lt;= value</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：枚举类，可以对比注释进行理解</p></blockquote><p><code>BetweenType</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  BetweenType &#123;</span><br><span class="line"></span><br><span class="line">    datetime,</span><br><span class="line">    number_long,</span><br><span class="line">    number_integer</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：对应上面 <code>QueryWord</code>中的 BetweenType ，可以对时间或数字之间的属性进行注解</p></blockquote><p><code>BaseQuery</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseQuery</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第多少页 + 页大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class, List&lt;Field&gt;&gt; fieldCache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Specification&lt;T&gt; <span class="title">toSpec</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pageable <span class="title">toPageable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PageRequest.of(pageNum, pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 分页 + 排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pageable <span class="title">toPageable</span><span class="params">(Sort sort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PageRequest.of(pageNum, pageSize, sort);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态查询 and 连接</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Specification&lt;T&gt; <span class="title">toSpecWithAnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.toSpecWithLogicType(<span class="string">&quot;and&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 动态查询 or 连接</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Specification&lt;T&gt; <span class="title">toSpecWithOr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.toSpecWithLogicType(<span class="string">&quot;or&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// logicType = or ｜ and</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Specification&lt;T&gt; <span class="title">toSpecWithLogicType</span><span class="params">(<span class="keyword">final</span> String logicType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BaseQuery outerThis = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 封装条件查询对象 Specification</span></span><br><span class="line">        Specification&lt;T&gt; specification = <span class="keyword">new</span> Specification&lt;T&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// Root 用于获取属性字段，CriteriaQuery可以用于简单条件查询，CriteriaBuilder 用于构造复杂条件查询</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">                Class clazz = outerThis.getClass();</span><br><span class="line">                <span class="comment">// 判断缓存中是否已经存在，存在不需要再次生成，不存在需要重新生成</span></span><br><span class="line">                List&lt;Field&gt; fields = fieldCache.get(clazz);</span><br><span class="line">                <span class="keyword">if</span> (fields == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取查询类Query的所有字段,包括父类字段</span></span><br><span class="line">                    fields = getAllFieldsWithRoot(clazz);</span><br><span class="line">                    fieldCache.put(clazz, fields);</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;Predicate&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;(fields.size());</span><br><span class="line">                <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                    <span class="comment">// 获取字段上的 @QueryWord 注解</span></span><br><span class="line">                    QueryWord qw = field.getAnnotation(QueryWord.class);</span><br><span class="line">                    <span class="keyword">if</span> (qw == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 获取字段名</span></span><br><span class="line">                    String column = qw.column();</span><br><span class="line">                    <span class="comment">//如果主注解上 column 为默认值&quot;&quot;,则以 field 为准</span></span><br><span class="line">                    <span class="keyword">if</span> (column.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                        column = field.getName();</span><br><span class="line">                    &#125;</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// nullable</span></span><br><span class="line">                        Object value = field.get(outerThis);</span><br><span class="line">                        <span class="comment">// 如果值为 null,注解未标注 nullable,跳过</span></span><br><span class="line">                        <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; !qw.nullable()) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// can be empty</span></span><br><span class="line">                        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; String.class.isAssignableFrom(value.getClass())) &#123;</span><br><span class="line">                            String s = (String) value;</span><br><span class="line">                            <span class="comment">//如果值为&quot;&quot;,且注解未标注 empty ,跳过</span></span><br><span class="line">                            <span class="keyword">if</span> (s.equals(<span class="string">&quot;&quot;</span>) &amp;&amp; !qw.empty()) &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//通过注解上 func 属性,构建路径表达式</span></span><br><span class="line">                        Path path = root.get(column);</span><br><span class="line">                        <span class="keyword">switch</span> (qw.func()) &#123;</span><br><span class="line">                            <span class="keyword">case</span> equal:</span><br><span class="line">                                predicates.add(cb.equal(path, value));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> like:</span><br><span class="line">                                predicates.add(cb.like(path, <span class="string">&quot;%&quot;</span> + value + <span class="string">&quot;%&quot;</span>));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> gt:</span><br><span class="line">                                predicates.add(cb.gt(path, (Number) value));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> lt:</span><br><span class="line">                                predicates.add(cb.lt(path, (Number) value));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> ge:</span><br><span class="line">                                predicates.add(cb.ge(path, (Number) value));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> le:</span><br><span class="line">                                predicates.add(cb.le(path, (Number) value));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> notEqual:</span><br><span class="line">                                predicates.add(cb.notEqual(path, value));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> notLike:</span><br><span class="line">                                predicates.add(cb.notLike(path, <span class="string">&quot;%&quot;</span> + value + <span class="string">&quot;%&quot;</span>));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> greaterThan:</span><br><span class="line">                                predicates.add(cb.greaterThan(path, (Comparable) value));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> greaterThanOrEqualTo:</span><br><span class="line">                                predicates.add(cb.greaterThanOrEqualTo(path, (Comparable) value));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> lessThan:</span><br><span class="line">                                predicates.add(cb.lessThan(path, (Comparable) value));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> lessThanOrEqualTo:</span><br><span class="line">                                predicates.add(cb.lessThanOrEqualTo(path, (Comparable) value));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> between:</span><br><span class="line">                                <span class="keyword">switch</span> (qw.type()) &#123;</span><br><span class="line">                                    <span class="keyword">case</span> datetime:</span><br><span class="line">                                        List&lt;Date&gt; dateList = (List&lt;Date&gt;) value;</span><br><span class="line">                                        predicates.add(cb.between(path, dateList.get(<span class="number">0</span>), dateList.get(<span class="number">1</span>)));</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    <span class="keyword">case</span> number_long:</span><br><span class="line">                                        List&lt;Long&gt; longList = (List&lt;Long&gt;) value;</span><br><span class="line">                                        predicates.add(cb.between(path, longList.get(<span class="number">0</span>), longList.get(<span class="number">1</span>)));</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    <span class="keyword">case</span> number_integer:</span><br><span class="line">                                        List&lt;Integer&gt; integerList = (List&lt;Integer&gt;) value;</span><br><span class="line">                                        predicates.add(cb.between(path, integerList.get(<span class="number">0</span>), integerList.get(<span class="number">1</span>)));</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Predicate p = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (logicType == <span class="keyword">null</span> || logicType.equals(<span class="string">&quot;&quot;</span>) || logicType.equals(<span class="string">&quot;and&quot;</span>)) &#123;</span><br><span class="line">                    p = cb.and(predicates.toArray(<span class="keyword">new</span> Predicate[predicates.size()])); <span class="comment">// and 连接</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (logicType.equals(<span class="string">&quot;or&quot;</span>)) &#123;</span><br><span class="line">                    p = cb.or(predicates.toArray(<span class="keyword">new</span> Predicate[predicates.size()]));  <span class="comment">// or 连接</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> specification;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取类 clazz 的所有 Field，包括其父类的 Field</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Field&gt; <span class="title">getAllFieldsWithRoot</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        List&lt;Field&gt; fieldList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Field[] dFields = clazz.getDeclaredFields(); <span class="comment">//获取本类所有字段</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != dFields &amp;&amp; dFields.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            fieldList.addAll(Arrays.asList(dFields));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若父类是 Object，则直接返回当前 Field 列表</span></span><br><span class="line">        Class&lt;?&gt; superClass = clazz.getSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (superClass == Object.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(dFields);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归查询父类的 Field 列表</span></span><br><span class="line">        List&lt;Field&gt; superFields = getAllFieldsWithRoot(superClass);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != superFields &amp;&amp; !superFields.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Field field : superFields) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fieldList.contains(field)) &#123;</span><br><span class="line">                    fieldList.add(field);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fieldList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageIndex</span><span class="params">(<span class="keyword">int</span> pageIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNum = pageIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：最关键的类</p><ul><li>所有后面要查询的类都要继承它</li><li>简单的理解：通过反射获取注解上的字段信息，构造相应的搜索条件</li></ul></blockquote><h2 id="三、Test"><a href="#三、Test" class="headerlink" title="三、Test"></a>三、Test</h2><p><code>StudentQuery</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentQuery</span> <span class="keyword">extends</span> <span class="title">BaseQuery</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@QueryWord(column = &quot;id&quot;, func = MatchType.equal)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@QueryWord(func = MatchType.like)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略 set / get</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Specification <span class="title">toSpec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toSpecWithOr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个查询中，使用的是 or 查询，测试类如下：</p><p><code>Test</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StudentQuery studentQuery = <span class="keyword">new</span> StudentQuery();</span><br><span class="line">    studentQuery.setId(<span class="number">1L</span>);</span><br><span class="line">    studentQuery.setName(<span class="string">&quot;er&quot;</span>);</span><br><span class="line">    studentQuery.setPageIndex(<span class="number">0</span>);</span><br><span class="line">    studentQuery.setPageSize(<span class="number">10</span>);</span><br><span class="line">    Page page = studentRepository.findAll(studentQuery.toSpec(), studentQuery.toPageable());</span><br><span class="line">    <span class="keyword">for</span> (Object o : page.getContent()) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：构造的条件是 id = 1的，或者 name = ? er ? 的 student</p></blockquote><p><code>结果</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200914200804.png" alt="image-20200914200754861"></p><p>通过这个例子简单捋一下整个过程：</p><ol><li>通过 studentQuery.toSpec() 调用父类 BaseQuery；</li><li>在 BaseQuery 中，通过反射获得打了相应注解上的字段信息；</li><li>将字段信息加到搜索条件中，进行 or 或者 and 连接</li></ol><blockquote><p>注：如果你的业务中只用了很少的条件或者只用极个别的多条件查询，可以不用这个工具类</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Spring Data JPA(二)</title>
      <link href="/2020/09/10/SpringBoot%E6%95%B4%E5%90%88Spring-Data-JPA-%E4%BA%8C/"/>
      <url>/2020/09/10/SpringBoot%E6%95%B4%E5%90%88Spring-Data-JPA-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、OverView"><a href="#一、OverView" class="headerlink" title="一、OverView"></a>一、OverView</h2><p>​        在上一篇文章中介绍了一下 Spring Data JPA 的一下简单的 CRUD，但是在公司业务中，不可能这么简单；且在业务中大部分都是查询业务，具体点就是动态查询，什么单表多条件查询、多表多条件查询等等……    </p><blockquote><p>注：使用环境还是和上一篇一样</p></blockquote><h2 id="二、自定义SQL查询"><a href="#二、自定义SQL查询" class="headerlink" title="二、自定义SQL查询"></a>二、自定义SQL查询</h2><p>如果想和这里面写原生的 SQL 语句，只要在 <strong>repository</strong> 中这样写就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(nativeQuery = true,</span></span><br><span class="line"><span class="meta">        value = &quot;select * from Student where id = ?1&quot;)</span></span><br><span class="line"><span class="function">Student <span class="title">catchAllById</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ul><li>如果要写原生 SQL，@Query 注解中的 nativeQuery 要设置为 true，默认为 false</li><li>函数名设置的不能与自带的冲突，例如：findById，如果设置了一样，就会导致使用的自带的 API 进行查询，而不是自定义的，如果真的想使用自定义覆盖自带的，可以在实体类上使用 @NamedQueries 注解</li></ul></blockquote><p>在这里我们就使用 @Test 进行测试：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911110259.png" alt="image-20200911110257151"></p><p>还有一种使用 JPQL 语法的查询方式：</p><p><code>repository:</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(value = &quot;select s from Student s where s.name = ?1&quot;)</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">catchByName</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><p><code>Test:</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911111044.png" alt="image-20200911111044489"></p><p>关于 JPQL：和在 SQL 中一样，JPQL 中的 select 语句用于执行查询。其语法可表示为：<br><code>select_clause form_clause [where_clause] [groupby_clause] [having_clause] [orderby_clause]</code></p><p>其中：</p><ol><li>from 子句是查询语句的必选子句。</li><li>select 用来指定查询返回的结果实体或实体的某些属性。</li><li>from 子句声明查询源实体类，并指定标识符变量（相当于SQL表的别名）。</li><li>如果不希望返回重复实体，可使用关键字 distinct 修饰。select、from 都是 JPQL 的关键字，通常全大写或全小写，建议不要大小写混用。</li></ol><p>在 JPQL 中，查询所有实体的 JPQL 查询语句很简单，如下：<br><code>select o from Order o 或 select o from Order as o</code><br>这里关键字 as 可以省去，标识符变量的命名规范与 Java 标识符相同，且区分大小写</p><p>更多参考：<a href="https://docs.oracle.com/html/E13946_04/ejb3_langref.html">官网文档</a></p><h2 id="三、自定义简单查询"><a href="#三、自定义简单查询" class="headerlink" title="三、自定义简单查询"></a>三、自定义简单查询</h2><p>在 Spring Data JPA 的<a href="https://docs.spring.io/spring-data/jpa/docs/2.3.3.RELEASE/reference/html/#jpa.named-parameters">官网</a>也介绍了这种方式，一般这种方式在一些小项目中也经常使用：</p><table><thead><tr><th align="center">Keyword</th><th align="center">Sample</th><th align="center">JPQL snippet</th></tr></thead><tbody><tr><td align="center"><code>And</code></td><td align="center"><code>findByLastnameAndFirstname</code></td><td align="center"><code>… where x.lastname = ?1 and x.firstname = ?2</code></td></tr><tr><td align="center"><code>Or</code></td><td align="center"><code>findByLastnameOrFirstname</code></td><td align="center"><code>… where x.lastname = ?1 or x.firstname = ?2</code></td></tr><tr><td align="center"><code>Is</code>, <code>Equals</code></td><td align="center"><code>findByFirstname</code>,<code>findByFirstnameIs</code>,<code>findByFirstnameEquals</code></td><td align="center"><code>… where x.firstname = ?1</code></td></tr><tr><td align="center"><code>Between</code></td><td align="center"><code>findByStartDateBetween</code></td><td align="center"><code>… where x.startDate between ?1 and ?2</code></td></tr><tr><td align="center"><code>LessThan</code></td><td align="center"><code>findByAgeLessThan</code></td><td align="center"><code>… where x.age &lt; ?1</code></td></tr><tr><td align="center"><code>LessThanEqual</code></td><td align="center"><code>findByAgeLessThanEqual</code></td><td align="center"><code>… where x.age &lt;= ?1</code></td></tr><tr><td align="center"><code>GreaterThan</code></td><td align="center"><code>findByAgeGreaterThan</code></td><td align="center"><code>… where x.age &gt; ?1</code></td></tr><tr><td align="center"><code>GreaterThanEqual</code></td><td align="center"><code>findByAgeGreaterThanEqual</code></td><td align="center"><code>… where x.age &gt;= ?1</code></td></tr><tr><td align="center"><code>After</code></td><td align="center"><code>findByStartDateAfter</code></td><td align="center"><code>… where x.startDate &gt; ?1</code></td></tr><tr><td align="center"><code>Before</code></td><td align="center"><code>findByStartDateBefore</code></td><td align="center"><code>… where x.startDate &lt; ?1</code></td></tr><tr><td align="center"><code>IsNull</code>, <code>Null</code></td><td align="center"><code>findByAge(Is)Null</code></td><td align="center"><code>… where x.age is null</code></td></tr><tr><td align="center"><code>IsNotNull</code>, <code>NotNull</code></td><td align="center"><code>findByAge(Is)NotNull</code></td><td align="center"><code>… where x.age not null</code></td></tr><tr><td align="center"><code>Like</code></td><td align="center"><code>findByFirstnameLike</code></td><td align="center"><code>… where x.firstname like ?1</code></td></tr><tr><td align="center"><code>NotLike</code></td><td align="center"><code>findByFirstnameNotLike</code></td><td align="center"><code>… where x.firstname not like ?1</code></td></tr><tr><td align="center"><code>StartingWith</code></td><td align="center"><code>findByFirstnameStartingWith</code></td><td align="center"><code>… where x.firstname like ?1</code> (parameter bound with appended <code>%</code>)</td></tr><tr><td align="center"><code>EndingWith</code></td><td align="center"><code>findByFirstnameEndingWith</code></td><td align="center"><code>… where x.firstname like ?1</code> (parameter bound with prepended <code>%</code>)</td></tr><tr><td align="center"><code>Containing</code></td><td align="center"><code>findByFirstnameContaining</code></td><td align="center"><code>… where x.firstname like ?1</code> (parameter bound wrapped in <code>%</code>)</td></tr><tr><td align="center"><code>OrderBy</code></td><td align="center"><code>findByAgeOrderByLastnameDesc</code></td><td align="center"><code>… where x.age = ?1 order by x.lastname desc</code></td></tr><tr><td align="center"><code>Not</code></td><td align="center"><code>findByLastnameNot</code></td><td align="center"><code>… where x.lastname &lt;&gt; ?1</code></td></tr><tr><td align="center"><code>In</code></td><td align="center"><code>findByAgeIn(Collection&lt;Age&gt; ages)</code></td><td align="center"><code>… where x.age in ?1</code></td></tr><tr><td align="center"><code>NotIn</code></td><td align="center"><code>findByAgeNotIn(Collection&lt;Age&gt; ages)</code></td><td align="center"><code>… where x.age not in ?1</code></td></tr><tr><td align="center"><code>True</code></td><td align="center"><code>findByActiveTrue()</code></td><td align="center"><code>… where x.active = true</code></td></tr><tr><td align="center"><code>False</code></td><td align="center"><code>findByActiveFalse()</code></td><td align="center"><code>… where x.active = false</code></td></tr><tr><td align="center"><code>IgnoreCase</code></td><td align="center"><code>findByFirstnameIgnoreCase</code></td><td align="center"><code>… where UPPER(x.firstame) = UPPER(?1)</code></td></tr></tbody></table><p>原理大概如下：</p><p><strong>假如创建如下的查询：<code>findByUserDepUuid()</code>，框架在解析该方法时，首先剔除 findBy，然后对剩下的属性进行解析</strong></p><ol><li>先判断 userDepUuid （根据 POJO 规范，首字母变为小写）是否为查询实体的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，继续第二步；</li><li>从右往左截取第一个大写字母开头的字符串此处为Uuid），然后检查剩下的字符串是否为查询实体的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，则重复第二步，继续从右往左截取；最后假设user为查询实体的一个属性；</li><li>接着处理剩下部分（DepUuid），先判断 user 所对应的类型是否有depUuid属性，如果有，则表示该方法最终是根据 <code>Doc.user.depUuid</code> 的取值进行查询；否则继续按照步骤 2 的规则从右往左截取，最终表示根据 <code>Doc.user.dep.uuid</code> 的值进行查询。</li><li>可能会存在一种特殊情况，比如 Doc包含一个 user 的属性，也有一个 userDep 属性，此时会存在混淆。可以明确在属性之间加上 “_” 以显式表达意图，比如 <code>findByUser_DepUuid()</code> 或者 <code>findByUserDep_uuid()</code></li></ol><p><code>repository:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findByNameAndPwd</span><span class="params">(String name, String pwd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findByNameStartingWith</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findByNameEndingWith</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findByNameContaining</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findByNameContainingOrderByIdDesc</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><p><code>test:</code></p><p><strong>findByName</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911112401.png" alt="image-20200911112401002"></p><p><strong>findByNameAndPwd</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911112633.png" alt="image-20200911112633532"></p><p><strong>findByNameStartingWith</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911112706.png" alt="image-20200911112706325"></p><p><strong>findByNameEndingWith</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911112749.png" alt="image-20200911112749472"></p><p><strong>findByNameContaining</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911112818.png" alt="image-20200911112818300"></p><p><strong>findByNameContainingOrderByIdDesc</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911120538.png" alt="image-20200911120538084"></p><h2 id="四、分页查询"><a href="#四、分页查询" class="headerlink" title="四、分页查询"></a>四、分页查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页 + 排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Sort sort = Sort.by(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">    PageRequest pageRequest = PageRequest.of(<span class="number">0</span>, <span class="number">2</span>, sort);</span><br><span class="line">    Page&lt;Student&gt; studentPage = studentRepository.findAll(pageRequest);</span><br><span class="line">    <span class="keyword">for</span> (Student student : studentPage.getContent()) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ul><li>Sort.by(排序方式, 排序字段)</li><li>PageRequest.of(第多少页，页大小)    ——–&gt;     一般是写一个 PageUtils</li></ul></blockquote><p><code>Test</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911142717.png" alt="image-20200911142717361"></p><h2 id="五、动态查询"><a href="#五、动态查询" class="headerlink" title="五、动态查询"></a>五、动态查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页 + 排序 + 搜索</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PageRequest pageRequest = PageRequest.of(<span class="number">0</span>, <span class="number">2</span>, Sort.by(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>));</span><br><span class="line">    Specification&lt;Student&gt; specification = <span class="keyword">new</span> Specification&lt;Student&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Student&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 增加搜索条件: id &lt;= 5</span></span><br><span class="line">            Predicate predicate = criteriaBuilder.lessThanOrEqualTo(root.get(<span class="string">&quot;id&quot;</span>), <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">return</span> predicate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Page&lt;Student&gt; studentPage = studentRepository.findAll(specification, pageRequest);</span><br><span class="line">    <span class="keyword">for</span> (Student student : studentPage.getContent()) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ul><li><p>root: 代表查询的实体类</p></li><li><p>query: 可以从中得到 Root 对象</p></li><li><p>criteriaBuilder: 用于创建 Criteria 相关对象的工厂</p></li><li><p>Predicate: 代表一个查询条件</p></li></ul></blockquote><p><code>Test:</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911143430.png" alt="image-20200911143430602"></p><p><code>多条件：</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页 + 排序 + 搜索</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PageRequest pageRequest = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>, Sort.by(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>));</span><br><span class="line">    List&lt;Predicate&gt; predicateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Specification&lt;Student&gt; specification = <span class="keyword">new</span> Specification&lt;Student&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Student&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line">            predicateList.add(criteriaBuilder.lessThanOrEqualTo(root.get(<span class="string">&quot;id&quot;</span>), <span class="number">5</span>));</span><br><span class="line">            predicateList.add(criteriaBuilder.like(root.get(<span class="string">&quot;name&quot;</span>), <span class="string">&quot;%&quot;</span> + <span class="string">&quot;er&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> criteriaBuilder.and(predicateList.toArray(<span class="keyword">new</span> Predicate[predicateList.size()]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Page&lt;Student&gt; studentPage = studentRepository.findAll(specification, pageRequest);</span><br><span class="line">    <span class="keyword">for</span> (Student student : studentPage.getContent()) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Test:</code> </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200911150134.png" alt="image-20200911150134356"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Spring Data JPA(一)</title>
      <link href="/2020/09/10/SpringBoot%E6%95%B4%E5%90%88Spring-Data-JPA-%E4%B8%80/"/>
      <url>/2020/09/10/SpringBoot%E6%95%B4%E5%90%88Spring-Data-JPA-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、OverView"><a href="#一、OverView" class="headerlink" title="一、OverView"></a>一、OverView</h2><blockquote><p>JPA(Java Persistence API)是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象/关联映射工具来管理Java应用中的关系数据。</p></blockquote><p>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data JPA 可以极大提高开发效率！</p><blockquote><p>spring data jpa让我们解脱了DAO层的操作，基本上所有CRUD都可以依赖于它来实现</p></blockquote><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/jpa</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"># 是否在控制台打印 sql 语句</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 使用 InnoDB 作为引擎 </span></span><br><span class="line"><span class="meta">spring.jpa.database-platform</span>=<span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line"><span class="comment"># 每次启动都会更新数据库，如：增加字段等，但是对某个字段进行改造是识别不出来</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br></pre></td></tr></table></figure><p><code>entiy</code></p><p><strong>Student</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;, columnDefinition = &quot;INT UNSIGNED COMMENT &#x27;自增主键&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;, columnDefinition = &quot;VARCHAR(50) NOT NULL COMMENT &#x27;用户名&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;pwd&quot;, columnDefinition = &quot;VARCHAR(100) DEFAULT NULL COMMENT &#x27;密码&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 省略 set get</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Grade</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;grade&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;, columnDefinition = &quot;INT UNSIGNED COMMENT &#x27;自增主键&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;subject&quot;, columnDefinition = &quot;VARCHAR(50) NOT NULL COMMENT &#x27;学科&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;score&quot;, columnDefinition = &quot;TINYINT UNSIGNED NOT NULL COMMENT &#x27;成绩&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 set get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：这次使用两个表，为了后面进行复杂查询准备，这里的将两个表的自增 id 关联在一起，就不考虑多对多了</p></blockquote><p><code>repository</code></p><p><strong>StudentRepository</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Student</span>, <span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GradeRepository</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GradeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Grade</span>, <span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Grade</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上次 aop 那里面就提过，由于继承的有 CRUD 的 repository 和一些其他的，这也是上面提到的解放 DAO 层的操作，具体的可以看下图</p></blockquote><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200910145019.png" alt="image-20200910145019869" style="zoom:150%;" /><h2 id="三、CRUD"><a href="#三、CRUD" class="headerlink" title="三、CRUD"></a>三、CRUD</h2><p><code>controller</code></p><p><strong>GradeController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/grade&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GradeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GradeRepository gradeRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGradeRepository</span><span class="params">(GradeRepository gradeRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gradeRepository = gradeRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Grade <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gradeRepository.save(grade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Grade&gt; <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gradeRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Grade <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gradeRepository.save(grade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="meta">@RequestParam</span> Long id)</span> </span>&#123;</span><br><span class="line">        gradeRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>StudentController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentRepository</span><span class="params">(StudentRepository studentRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentRepository = studentRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.save(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.save(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="meta">@RequestParam</span> Long id)</span> </span>&#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ul><li><p>Spring 建议在这里的注入方式是 set 或者 构造注入，不要直接注解注入</p></li><li><p>为了方便，在这里还是省略了 Service 层的操作</p></li></ul></blockquote><p><code>Postman测试</code></p><p><code>增</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200910150238.png" alt="image-20200910150238245"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200910150312.png" alt="image-20200910150312117"></p><p><code>查</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200910150428.png" alt="image-20200910150428435"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200910150520.png" alt="image-20200910150520147"></p><p><code>改</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200910150633.png" alt="image-20200910150633346"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200910150752.png" alt="image-20200910150751979"></p><p><code>删</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200910150920.png" alt="image-20200910150920385"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200910151023.png" alt="image-20200910151023629"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合MyBatis</title>
      <link href="/2020/09/09/SpringBoot%E6%95%B4%E5%90%88MyBatis/"/>
      <url>/2020/09/09/SpringBoot%E6%95%B4%E5%90%88MyBatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、OverView"><a href="#一、OverView" class="headerlink" title="一、OverView"></a>一、OverView</h2><p>​    在上篇文章中已经简单的写过 SpringBoot 整合 JDBCTemplate 了，但是现在的公司应该很少有用 JDBCTemplate，国内一般都是 MyBatis 或者是 Spring Data JPA，在本篇文章中就来整合一下 MyBatis。</p><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><p>新建 SpringBoot 项目，选上 Web、MySQL，在 pom.xml  中配置一下数据库连接池：</p><p><code>pom.xml:</code>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.properties:</code> </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="三、CRUD"><a href="#三、CRUD" class="headerlink" title="三、CRUD"></a>三、CRUD</h2><p><code>UserMapper:</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 增</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into mybatis(name, password) values(#&#123;name&#125;, #&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@SelectKey(statement = &quot;select last_insert_id()&quot;, keyProperty = &quot;id&quot;, before = false, resultType = Long.class)</span></span><br><span class="line">    <span class="function">Integer <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 查</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from mybatis&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryAllUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;id&quot;, column = &quot;i&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;name&quot;, column = &quot;n&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;password&quot;, column = &quot;p&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Select(&quot;select id as i, name as n, password as p from mybatis where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 改</span></span><br><span class="line">    <span class="meta">@Update(&quot;update mybatis set name = #&#123;name&#125;, password = #&#123;password&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 删</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from mybatis where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ul><li><p>如果不使用注解的方式，就要使用 xml 的方式，注意其中的资源解析问题：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><code>增加</code> </p><ul><li>statement是要运行的SQL语句，它的返回值通过resultType来指定</li><li>before表示查询语句statement运行的时机</li><li>keyProperty表示查询结果赋值给代码中的哪个对象，keyColumn表示将查询结果赋值给数据库表中哪一列</li><li>keyProperty和keyColumn都不是必需的，有没有都可以</li><li>before=true，插入之前进行查询，可以将查询结果赋给keyProperty和keyColumn，赋给keyColumn相当于更改数据库</li><li>befaore=false，先插入，再查询，这时只能将结果赋给keyProperty</li><li>赋值给keyProperty用来“读”数据库，赋值给keyColumn用来写数据库</li><li>selectKey的两大作用：1、生成主键；2、获取刚刚插入数据的主键。</li><li>使用selectKey，并且使用MySQL的last_insert_id()函数时，before必为false，也就是说必须先插入然后执行last_insert_id()才能获得刚刚插入数据的ID。</li><li>参考链接：<a href="https://www.cnblogs.com/weiyinfu/p/6835301.html#3">@SelectKey注解</a></li></ul><p><code>查</code></p><ul><li>@Results注解类似于XML中的ResultMap映射文件</li></ul></blockquote><p><code>UserController:</code> 为了方便就不再写 Service 层了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMapper</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insert</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryAllUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Postman 测试：</code> </p><p>增加：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200909152447.png" alt="image-20200909152436340"></p><p>查询所有：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200909152617.png" alt="image-20200909152617644"></p><p>通过 id 查询：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200909152702.png" alt="image-20200909152702160"></p><p>更新：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200909152910.png" alt="image-20200909152910165"></p><p>查看一下数据库：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200909152940.png" alt="image-20200909152940948"></p><p>删除：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200909153038.png" alt="image-20200909153032470"></p><p>查看一下数据库：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200909153131.png" alt="image-20200909153131838"></p><blockquote><p>使用注解进行动态查询具体可以参考：<a href="https://mybatis.org/mybatis-3/zh/java-api.html">注解版动态查询</a></p><p>使用 xml 方式进行动态查询可以参考：<a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html">xml 版动态查询</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合JDBCTemplate</title>
      <link href="/2020/09/08/SpringBoot%E6%95%B4%E5%90%88JDBCTemplate/"/>
      <url>/2020/09/08/SpringBoot%E6%95%B4%E5%90%88JDBCTemplate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// WEB</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//  JDBC </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 使用 Swagger 进行接口测试</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// mysql</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">// druid</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-数据库脚本"><a href="#2-数据库脚本" class="headerlink" title="2.数据库脚本"></a>2.数据库脚本</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`sys_user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  <span class="string">`nick_name`</span> <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">  <span class="string">`avatar`</span> <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;头像&#x27;</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="string">`salt`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;加密盐&#x27;</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  <span class="string">`mobile`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;状态  0：禁用   1：正常&#x27;</span>,</span><br><span class="line">  <span class="string">`dept_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;机构ID&#x27;</span>,</span><br><span class="line">  <span class="string">`create_by`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="string">`last_update_by`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">  <span class="string">`last_update_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="string">`del_flag`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;是否删除  -1：已删除  0：正常&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`name`</span> (<span class="string">`name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">34</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">&#x27;用户管理&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>application.properties:</code> </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">******</span></span><br></pre></td></tr></table></figure><h2 id="二、CRUD"><a href="#二、CRUD" class="headerlink" title="二、CRUD"></a>二、CRUD</h2><h3 id="1-编写对应的实体类"><a href="#1-编写对应的实体类" class="headerlink" title="1.编写对应的实体类"></a>1.编写对应的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Byte status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long deptId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastUpdateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date lastUpdateTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Byte delFlag;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// set 和 get 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-编写对应的-CRUD-Repository"><a href="#2-编写对应的-CRUD-Repository" class="headerlink" title="2.编写对应的 CRUD Repository"></a>2.编写对应的 CRUD Repository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insert</span><span class="params">(SysUser user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into sys_user(id, name, password) values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, user.getId(), user.getName(), user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insert1</span><span class="params">(SysUser sysUser)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into sys_user(id, name, password) values(:id, :name, :password)&quot;</span>;</span><br><span class="line">        NamedParameterJdbcTemplate namedParameterJdbcTemplate = <span class="keyword">new</span> NamedParameterJdbcTemplate(<span class="keyword">this</span>.jdbcTemplate.getDataSource());</span><br><span class="line">        <span class="keyword">return</span> namedParameterJdbcTemplate.update(sql, <span class="keyword">new</span> BeanPropertySqlParameterSource(sysUser));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 推荐使用这种方式，可以不用传所有的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insert2</span><span class="params">(SysUser sysUser)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into sys_user(id, name, password) values(:id, :name, :password)&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, sysUser.getId());</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, sysUser.getName());</span><br><span class="line">        map.put(<span class="string">&quot;password&quot;</span>, sysUser.getPassword());</span><br><span class="line">        NamedParameterJdbcTemplate namedParameterJdbcTemplate = <span class="keyword">new</span> NamedParameterJdbcTemplate(<span class="keyword">this</span>.jdbcTemplate.getDataSource());</span><br><span class="line">        <span class="keyword">return</span> namedParameterJdbcTemplate.update(sql, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">update</span><span class="params">(SysUser sysUser)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update sys_user set name = ?, password = ? where id = ?&quot;</span>;</span><br><span class="line">        Object[] args = &#123;sysUser.getName(), sysUser.getPassword(), sysUser.getId()&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] argTypes = &#123;Types.VARCHAR, Types.VARCHAR, Types.BIGINT&#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate.update(sql, args, argTypes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryAllListMap() &#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from sys_user&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate.queryForList(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 这里要写一个 SysUserMapper 实现 RowMapper</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from sys_user where id = ?&quot;</span>;</span><br><span class="line">        Object[] args = &#123;id&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] argTypes = &#123;Types.BIGINT&#125;;</span><br><span class="line">        List&lt;SysUser&gt; list = <span class="keyword">this</span>.jdbcTemplate.query(sql, args, argTypes, <span class="keyword">new</span> SysUserMapper());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from sys_user where id = ?&quot;</span>;</span><br><span class="line">        Object[] args = &#123; id &#125;;</span><br><span class="line">        <span class="keyword">int</span>[] argTypes = &#123; Types.BIGINT &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate.update(sql, args, argTypes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-对应的-Controller-层"><a href="#3-对应的-Controller-层" class="headerlink" title="3.对应的 Controller 层"></a>3.对应的 Controller 层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserRepository sysUserRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insert</span><span class="params">(<span class="meta">@RequestBody</span> SysUser sysUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = sysUserRepository.insert(sysUser);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/insert1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insert1</span><span class="params">(<span class="meta">@RequestBody</span> SysUser sysUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = sysUserRepository.insert1(sysUser);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/insert2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insert2</span><span class="params">(<span class="meta">@RequestBody</span> SysUser sysUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = sysUserRepository.insert2(sysUser);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> SysUser sysUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = sysUserRepository.update(sysUser);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryAllListMap() &#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserRepository.queryAllListMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/id1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserRepository.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/id3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：为了图方便，就不再此写 Service 层了</p></blockquote><h3 id="4-使用-Swagger-进行测试"><a href="#4-使用-Swagger-进行测试" class="headerlink" title="4.使用 Swagger 进行测试"></a>4.使用 Swagger 进行测试</h3><p><code>增加</code> </p><p>第一种方式：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200908210508.png" alt="image-20200908210503256"></p><p>第二种方式：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200908210645.png" alt="image-20200908210645484"></p><p>第三种方式：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200908210805.png" alt="image-20200908210804954"></p><p>看一下数据库是否有三条数据：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200908210847.png" alt="image-20200908210846969"></p><p><code>修改</code> </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200908211258.png" alt="image-20200908211258932"></p><p><code>查找</code>  </p><p>查找所有：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200908211934.png" alt="image-20200908211934284"></p><p><code>删除</code>  </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200908212720.png" alt="image-20200908212720578"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0076.Minimum Window Substring</title>
      <link href="/2020/09/04/0076-Minimum-Window-Substring/"/>
      <url>/2020/09/04/0076-Minimum-Window-Substring/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="76-最小覆盖子串-Hard"><a href="#76-最小覆盖子串-Hard" class="headerlink" title="76. 最小覆盖子串  Hard"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/">76. 最小覆盖子串</a>  <font color="#e82f34" size=5>Hard</font></h2><p>给你一个字符串 S、一个字符串 T 。请你设计一种算法，可以在 O(n) 的时间复杂度内，从字符串 S 里面找出：包含 T 所有字符的最小子串。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：S &#x3D; &quot;ADOBECODEBANC&quot;, T &#x3D; &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>如果 S 中不存这样的子串，则返回空字符串 <code>&quot;&quot;</code>。</li><li>如果 S 中存在这样的子串，我们保证它是唯一的答案。</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>​        这题在 0003 题中就已经提过了的暗号，就是洒洒水的使用一下 <code>Sliding Window</code> 就可以了，思路还是比较简单的：先不断的扩张窗口右边，直到将所有的要包含的短字符串；然后开始就移动窗口的左边，直到左边压缩到不能再容纳这个短字符串了，再进行不断比较，就可以得到最终结果了。<br>​        这种时候就需要出现 <strong>但是</strong> 这个词语，果然在实现的时候就需要注意很多问题了，对于这种抽象问题，先来个🌰：给的例子实在是太普通了，应该用那种带点特殊性的例子</p><blockquote><p>S = “ABANCDB”     T = “ABC”</p></blockquote><p>对着代码捋一遍应该就懂了：<br>第一遍过后可以看见：”ABANC” 是一个滑动窗口，map 的值也变为了：</p><table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">B</th><th align="center">C</th></tr></thead><tbody><tr><td align="center">初始值</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">遍历到 A</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">遍历到 B</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">遍历到 A</td><td align="center">-1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">遍历到 N</td><td align="center">-1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">遍历到 C</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><p>此时的 count == t 的长度了，这样扩张窗口就完成了 ======&gt;   min = 5</p><p>接下来就是收缩窗口，其根本原因就是这样左边出现重复元素，可以去掉形成最小的窗口：</p><p>如果在 map 中的值是等于 0 的，说明它是刚刚好的，如果把这个排除的话，这个窗口就不再成立了，要继续扩张</p><p>窗口了；如果 map 中的值 小于 0 的，说明它是多余的，但是要看它的位置了，可以看下🌰：</p><p>“ABANC” 这个 A 就可以去掉；”BAANC” 这个 A 就不可以去掉，此时就要扩张窗口了</p><p><del>反复横跳</del> ，完成✅</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                <span class="comment">// 使用 hashmap 将 t 中的字符存入</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = t.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(c)) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = map.get(c);</span><br><span class="line">                map.put(c, tmp + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(c, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用来判断这个窗口是否包含了 t</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 一个窗口的左右</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">      <span class="comment">// 长度最小的窗口的左右</span></span><br><span class="line">        <span class="keyword">int</span> minLeft = <span class="number">0</span>, minRight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; right &lt; s.length(); right++) &#123;</span><br><span class="line">            <span class="keyword">char</span> temp = s.charAt(right);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(temp)) &#123;</span><br><span class="line">                count = map.get(temp) &gt; <span class="number">0</span> ? count + <span class="number">1</span> : count;</span><br><span class="line">                map.put(temp, map.get(temp) - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (count == t.length()) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((right - left) &lt; min) &#123;</span><br><span class="line">                    min = right - left;</span><br><span class="line">                    minLeft = left;</span><br><span class="line">                    minRight = right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">char</span> c = s.charAt(left);</span><br><span class="line">              <span class="comment">// 左边的重复字符可以不用</span></span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(c)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (map.get(c) &gt;= <span class="number">0</span>)</span><br><span class="line">                        count--;</span><br><span class="line">                    map.put(c, map.get(c) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min == Integer.MAX_VALUE ? <span class="string">&quot;&quot;</span> : s.substring(minLeft, minRight + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> String </tag>
            
            <tag> Sliding Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合AOP</title>
      <link href="/2020/09/03/SpringBoot%E6%95%B4%E5%90%88AOP/"/>
      <url>/2020/09/03/SpringBoot%E6%95%B4%E5%90%88AOP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>​        在公司写业务的时候，都会有保存日志的操作，方便出错的时候进行排查；一般不仅仅在数据库中保存日志，</p><p>也会在后端控制台打印一些需要的信息。在这里，一般使用 AOP 织入的方式将日志保存在数据库中，使用一些日</p><p>志包将某些 Controller 层的信息打印在控制台。</p><h2 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h2><h3 id="Entiy"><a href="#Entiy" class="headerlink" title="Entiy:"></a>Entiy:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;log&quot;)</span></span><br><span class="line"><span class="meta">@EntityListeners(AuditingEntityListener.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY )</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;title&quot;, columnDefinition = &quot;VARCHAR(100) COMMENT &#x27;标题&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;author&quot;, columnDefinition = &quot;VARCHAR(255) COMMENT &#x27;作者&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;content&quot;, columnDefinition = &quot;TEXT COMMENT &#x27;内容&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// get 和 set 省略</span></span><br></pre></td></tr></table></figure><blockquote><p>注: 这里是使用 Spring Data JPA 自动生成的数据库对应实体，导入相关依赖后，可以先运行一遍，看数据库</p><p>是否生成对应实体；然后自行在数据库中插入几条数据。</p></blockquote><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository:"></a>Repository:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LogRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Log</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注: 这里只要继承 <code>JpaRepository</code> ，这个 repository 也继承了别的 repository（里面有一些常见的方法可以</p><p>调用）</p></blockquote><h3 id="Service"><a href="#Service" class="headerlink" title="Service:"></a>Service:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LogRepository logRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Log&gt; <span class="title">getAllLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Log&gt; logs = logRepository.findAll();</span><br><span class="line">        <span class="keyword">return</span> logs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注: 这里就不写接口，再去实现了</p></blockquote><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller:"></a>Controller:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Log&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Log&gt; logs = logService.getAllLog();</span><br><span class="line">        <span class="keyword">return</span> logs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再使用 <strong>Postman</strong> 等工具进行一次测试就行</p><h2 id="三、使用注解的方式进行-AOP"><a href="#三、使用注解的方式进行-AOP" class="headerlink" title="三、使用注解的方式进行 AOP"></a>三、使用注解的方式进行 AOP</h2><p>首先定义一个方法级别的 <code>@Log</code> 注解，用于标注需要监控的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个LogAspect类，使用 <code>@Aspect</code> 标注让其成为一个切面，切点为使用 <code>@Log</code> 注解标注的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspec</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger  = LoggerFactory.getLogger(LogAspec.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(org.wangba.springboot013aop.antoation.Log)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Start Time: &#123;&#125;&quot;</span>, System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;End Time: &#123;&#125;&quot;</span>, System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在 <code>Controller</code> 层的方法上加上 <code>@Log</code> 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Log(&quot;获得所有文章&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = logService.getAllLog();</span><br><span class="line">        <span class="keyword">return</span> articles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时再在 <strong>Postman</strong> 中测试一次，你就可以看到控制台会打印如下结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200903214650.png" alt="image-20200903214650730"></p><blockquote><p>在公司业务中，我们一般都是在  <code>@Before</code> 进行一些请求信息等， <code> @After</code> 在控制台打印一些信息，并将结</p><p>果直接存到数据库中的日志表中。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中类型转换</title>
      <link href="/2020/09/02/SpringBoot%E4%B8%AD%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/09/02/SpringBoot%E4%B8%AD%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h2><p>如果前端传来一个日期参数，是用 String 类型的，我们如何在后端进行传参呢？</p><p>也即如下这种情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器输入：<a href="http://localhost:8080/hello?date=2020-01-01">http://localhost:8080/hello?date=2020-01-01</a></p><p>可以在后台看到  <code>WARN</code> ：</p><blockquote><p>Failed to convert value of type ‘java.lang.String’ to required type ‘java.util.Date’</p></blockquote><h2 id="二、解决"><a href="#二、解决" class="headerlink" title="二、解决"></a>二、解决</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTransDate</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> simpleDateFormat.parse(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：要将该类使用 @Component 注入</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0003.Longest Substring Without Repeating Characters</title>
      <link href="/2020/09/01/0003-Longest-Substring-Without-Repeating-Characters/"/>
      <url>/2020/09/01/0003-Longest-Substring-Without-Repeating-Characters/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="0003-无重复字符的最长子串-Medium"><a href="#0003-无重复字符的最长子串-Medium" class="headerlink" title="0003. 无重复字符的最长子串 Medium"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">0003. 无重复字符的最长子串</a> <font color="#fd9016" size=5>Medium</font></h2><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line"></span><br><span class="line">请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p> 🐷：第一个想法就是这个是不是和 KMP 算法有那么一点点像的</p><p> 力扣：让你见识一下，值得我们官网有一个标签的思想 ———&gt;  <code>Sliding Window</code> </p><p>🐷：说人话</p><p>力扣：就是 <code>滑动窗口</code> 大法，你后面会看到很多次这种思想，想继续看这样的题，点<a href="https://leetcode-cn.com/tag/sliding-window/">这里</a>，还有一些暗号：76、</p><p>438、567</p><blockquote><p>滑动窗口思想：</p><p>滑动窗口的右边界不断的右移，只要没有重复的字符，就持续向右扩大窗口边界。一旦出现了重复字符，就需要缩小左边界，直到重复的字符移出了左边界，然后继续移动滑动窗口的右边界。以此类推，每次移动需要计算当前长度，并判断是否需要更新最大长度，最终最大的值就是题目中的所求。</p></blockquote><p>🐷：应该就是双指针的变形版了……..</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(i)))</span><br><span class="line">                j = Math.max(j, map.get(s.charAt(i)) + <span class="number">1</span>);</span><br><span class="line">            map.put(s.charAt(i), i);</span><br><span class="line">            max = Math.max(max, i - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> String </tag>
            
            <tag> Sliding Window </tag>
            
            <tag> Two pointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中的路径映射</title>
      <link href="/2020/09/01/SpringBoot%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84%E6%98%A0%E5%B0%84/"/>
      <url>/2020/09/01/SpringBoot%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、在-SpringBoot中使用-SSM-框架中的映射"><a href="#一、在-SpringBoot中使用-SSM-框架中的映射" class="headerlink" title="一、在 SpringBoot中使用 SSM 框架中的映射"></a>一、在 SpringBoot中使用 SSM 框架中的映射</h2><p>写下如下的 Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在 <code>resources/templates</code> 中新建 <code>hello.html</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Spring Boot<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：在 SpringBoot 中，默认的静态资源是放在以下几个位置：</p><ol><li>classpath:/META-INF/resources/</li><li>classpath:/resources/</li><li>classpath:/static/</li><li>classpath:/public/</li><li>/</li></ol><p>其中第 5 个表示 webapp 目录中的静态资源也不被拦截</p></blockquote><p>所以在这里这不是一个静态资源，我们以前的做法就是直接返回这个页面，没写上面的 Controller 直接使用 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 是访问不到该页面的</p><h2 id="二、在-SpringBoot-中进行路径映射"><a href="#二、在-SpringBoot-中进行路径映射" class="headerlink" title="二、在 SpringBoot 中进行路径映射"></a>二、在 SpringBoot 中进行路径映射</h2><p>只需要进行如下配置就可以进行路径映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;wangba&quot;</span>).setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次访问：<a href="http://localhost:8080/wangba">http://localhost:8080/wangba</a></p><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200901203239.png" alt="image-20200901203234294"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0001.Two Sum</title>
      <link href="/2020/08/31/0001-Two-Sum/"/>
      <url>/2020/08/31/0001-Two-Sum/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="0001-两数之和-Easy"><a href="#0001-两数之和-Easy" class="headerlink" title="0001. 两数之和  Easy"></a><a href="https://leetcode-cn.com/problems/two-sum/">0001. 两数之和</a>  <font color="green" size=5>Easy</font></h2><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>傻瓜式想法：遍历两次，求和（去除重复的元素，位置不同的相等元素可以进行计算）</p><p>力扣内心OS：你这样的时间复杂度能过算我输！！！</p><p>😯：就这，略施小计：<code>空间换时间之术</code> </p></blockquote><p>首先，遍历一遍数组将数组的值放入 Map 中，然后再遍历一次，将 target - 取到的值，但是要注意不能仅仅判断是</p><p>否存在这个值，因为可能会出现下面这种情况：target = 4，该数组中就只有一个 2，这样就会出错。所以还要判断</p><p>取到的值还不能是第一次的元素。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            hashMap.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (hashMap.containsKey(temp) &amp;&amp; hashMap.get(temp) != i) &#123;</span><br><span class="line">                res[<span class="number">0</span>] = hashMap.get(temp);</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中的Servlet、Filter、Listener</title>
      <link href="/2020/08/31/SpringBoot%E4%B8%AD%E7%9A%84Servlet%E3%80%81Filter%E3%80%81Listener/"/>
      <url>/2020/08/31/SpringBoot%E4%B8%AD%E7%9A%84Servlet%E3%80%81Filter%E3%80%81Listener/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Servlet"><a href="#一、Servlet" class="headerlink" title="一、Servlet"></a>一、Servlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/MyServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@WebServlet(urlPatterns = “/MyServlet”)：指定Servlet指定的 URL</p></blockquote><h2 id="二、Filter"><a href="#二、Filter" class="headerlink" title="二、Filter"></a>二、Filter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyFilter&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@WebFilter(“/*”)：指定路径进行过滤</p></blockquote><h2 id="三、Listener"><a href="#三、Listener" class="headerlink" title="三、Listener"></a>三、Listener</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;requestInitialized.............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;requestDestroyed................&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@WebListener：标注为监听器</p></blockquote><p><code>可以自行测试修改路由路径等进行测试</code></p><h2 id="四、区别"><a href="#四、区别" class="headerlink" title="四、区别"></a>四、区别</h2><p>启动结果：<a href="http://localhost:8080/MyServlet">http://localhost:8080/MyServlet</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200831195105.png" alt="image-20200831195100184"></p><p>配合官方图解释一下：</p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200831195155.png" alt="image-20200831195155569" style="zoom: 50%;" /><p>首先是 <strong><code>Listener</code></strong> ==&gt; <strong><code>Filter</code></strong> ==&gt; <strong><code>Servlet</code></strong> </p><p>下面还有一次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyFilter</span><br><span class="line">requestDestroyed................</span><br></pre></td></tr></table></figure><p>再浏览器打开控制台，强制刷新一下：macOS(快捷键：command + shift + R)，可以看到：</p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200831195932.png" alt="image-20200831195932817" style="zoom: 200%;" /><p>最下面的那个是我的浏览器扩展加载的脚本</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中定义系统启动任务</title>
      <link href="/2020/08/22/SpringBoot%E4%B8%AD%E5%AE%9A%E4%B9%89%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/08/22/SpringBoot%E4%B8%AD%E5%AE%9A%E4%B9%89%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、CommandLineRunner"><a href="#一、CommandLineRunner" class="headerlink" title="一、CommandLineRunner"></a>一、CommandLineRunner</h2><p>通过实现 <code>CommandLineRunner</code> 来定义启动任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Order(1):&quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner01</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Order(2):&quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><blockquote><ul><li><strong>@Order</strong> 注解为优先级，数值越小，优先级越高；</li><li><strong>args</strong> 为启动类中的 String[] args；</li><li><strong>args</strong> 参数可以在配置里面的 Program argumens 进行配置，也可以打成 jar 包的时候，使用命令进行设置</li></ul></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200821142114.png" alt="image-20200821142109335"></p><p>最终结果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200821142416.png" alt="image-20200821142416869"></p><blockquote><p>可以看到 Order(1) 的优先级高于 Order(2)</p></blockquote><h2 id="二、ApplicationRunner"><a href="#二、ApplicationRunner" class="headerlink" title="二、ApplicationRunner"></a>二、ApplicationRunner</h2><p>通过实现 <code>ApplicationRunner</code> 来定义启动任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Order3:&quot;</span>);</span><br><span class="line">        String[] sourceArgs = args.getSourceArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;sourceArg:&quot;</span> + Arrays.toString(sourceArgs));</span><br><span class="line">        System.out.println(<span class="string">&quot;🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; nonOptionArgs = args.getNonOptionArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;nonOptionArgs:&quot;</span> + nonOptionArgs);</span><br><span class="line">        System.out.println(<span class="string">&quot;🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; optionNames = args.getOptionNames();</span><br><span class="line">        <span class="keyword">for</span> (String optionName : optionNames) &#123;</span><br><span class="line">            System.out.println(optionName + args.getOptionValues(optionName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(4)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner01</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Order4&quot;</span>);</span><br><span class="line">        String[] sourceArgs = args.getSourceArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;sourceArg:&quot;</span> + Arrays.toString(sourceArgs));</span><br><span class="line">        System.out.println(<span class="string">&quot;🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; nonOptionArgs = args.getNonOptionArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;nonOptionArgs:&quot;</span> + nonOptionArgs);</span><br><span class="line">        System.out.println(<span class="string">&quot;🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; optionNames = args.getOptionNames();</span><br><span class="line">        <span class="keyword">for</span> (String optionName : optionNames) &#123;</span><br><span class="line">            System.out.println(optionName + args.getOptionValues(optionName));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰🌰&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>args.getNonOptionArgs()：可以用来获取命令行中的无key参数；</li><li>args.getOptionNames()：可以用来获取所有key/value形式的参数的key；</li><li>args.getOptionValues(key))：可以根据key获取key/value 形式的参数的value；</li><li>args.getSourceArgs();：则表示获取命令行中的所有参数。</li></ol></blockquote><p>参数配置：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200821150447.png" alt="image-20200821150447765"></p><p>最终结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200821150509.png" alt="image-20200821150509271"></p><blockquote><p>注：<code>CommandLineRunner</code> 和 <code>ApplicationRunner</code> 是可以一起用的，优先级还是通过 <code>@Order</code> 进行排序</p></blockquote><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200821150916.png" alt="image-20200821150916948"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合过滤器和拦截器</title>
      <link href="/2020/08/20/SpringBoot%E6%95%B4%E5%90%88%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2020/08/20/SpringBoot%E6%95%B4%E5%90%88%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、过滤器"><a href="#一、过滤器" class="headerlink" title="一、过滤器"></a>一、过滤器</h2><p>新建如下的 Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器的实现：定义一个类实现 <code>Filter</code> ，并重写其中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initialization&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++ Start ++++++++&quot;</span>);</span><br><span class="line">        Long start = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter costs: &quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date().getTime() - start);</span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++ End ++++++++&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter is over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>init 方法：是对项目启动时，进行的初始化</p><p>doFilter 方法：当执行一个请求的时候，进行过滤</p><p>destroy 方法：当这个项目关闭时，该过滤器也被销毁了</p></blockquote><p>浏览器运行：<a href="http://localhost:8080/user/666">http://localhost:8080/user/666</a></p><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200820151800.png" alt="image-20200820151800190"></p><p>在这个过程中出现了一点问题：</p><p>当我们进行下面这种过滤一部分的情况下：</p><p><code>TimeFilter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/user/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(filterConfig.getServletContext().getContextPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;Initialization........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++ Start ++++++++&quot;</span>);</span><br><span class="line">        Long start = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter costs: &quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date().getTime() - start);</span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++ End ++++++++&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter is over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userID：&quot;</span> +id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HelloController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们过滤的是 <code>/user</code> 后面所有的请求，但是结果是 <code>UserController</code> 和 <code>HelloController</code> 都进入了过滤器中：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200820202233.png" alt="image-20200820194717715"></p><p>最终解决方案：去掉在 <code>TimeFilter</code> 中的 <strong>@Component</strong> 注解，在启动类上加上 <strong>@ServletComponentScan</strong> 注解即可：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200820202230.png" alt="image-20200820194815278"></p><p>在上面我们使用了注解的方式进行过滤：</p><blockquote><p>@WebFilter(urlPatterns = “/*”)</p></blockquote><p>第二种方式：</p><p>去掉  <strong>@Component</strong> 和 *<em>@WebFilter(urlPatterns = {“/user/</em>“})** 注解，并配置如下的配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">timeFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        TimeFilter timeFilter = <span class="keyword">new</span> TimeFilter();</span><br><span class="line">        filterRegistrationBean.setFilter(timeFilter);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; urlList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        urlList.add(<span class="string">&quot;/user/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterRegistrationBean.setUrlPatterns(urlList);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、拦截器"><a href="#二、拦截器" class="headerlink" title="二、拦截器"></a>二、拦截器</h2><p>编写一个拦截器类实现 <code>HandlerInterceptor</code> ，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理拦截之前&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;startTime&quot;</span>, <span class="keyword">new</span> Date().getTime());</span><br><span class="line">        System.out.println(((HandlerMethod) handler).getBean().getClass().getName());</span><br><span class="line">        System.out.println(((HandlerMethod) handler).getMethod().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始处理拦截&quot;</span>);</span><br><span class="line">        Long start = (Long) request.getAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;【拦截器】耗时 &quot;</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理拦截之后&quot;</span>);</span><br><span class="line">        Long start = (Long) request.getAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;【拦截器】耗时 &quot;</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">        System.out.println(<span class="string">&quot;异常信息 &quot;</span> + ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>preHandle</code> 方法在处理拦截之前执行</p><p><code>postHandle </code>方法只有当被拦截的方法没有抛出异常成功时才会处理</p><p><code>afterCompletion</code> 方法无论被拦截的方法抛出异常与否都会执行</p></blockquote><p>将我们写好的拦截器注册到容器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TimeInterceptor timeInterceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(timeInterceptor).addPathPatterns(<span class="string">&quot;/user/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样分别运行：<a href="http://localhost:8080/user/888">http://localhost:8080/user/888</a> 和 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a></p><p>可以看见结果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200820202209.png" alt="image-20200820202151954"></p><p>只是对 <strong>user/888</strong> 进行拦截了，对 <strong>hello</strong> 没有进行拦截</p><h2 id="三、过滤器与拦截器的对比"><a href="#三、过滤器与拦截器的对比" class="headerlink" title="三、过滤器与拦截器的对比"></a>三、过滤器与拦截器的对比</h2><p>我们再将前面的过滤器加入其中，可以得到如下结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200820202751.png" alt="image-20200820202751525"></p><p>有一张已经整理好执行顺序图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200820202854.png" alt="32361-20180530095349427-444141538"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中跨域问题</title>
      <link href="/2020/08/20/SpringBoot%E4%B8%AD%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/20/SpringBoot%E4%B8%AD%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、同源策略"><a href="#一、同源策略" class="headerlink" title="一、同源策略"></a>一、同源策略</h2><p>​        同源策略是由 Netscape 提出的一个著名的安全策略，它是浏览器最核心也最基本的安全功能，现在所有支持 JavaScript 的浏览器都会使用这个策略。所谓同源是指协议、域名以及端口要相同。同源策略是基于安全方面的考虑提出来的，这个策略本身没问题，但是我们在实际开发中，由于各种原因又经常有跨域的需求，传统的跨域方案是 JSONP，JSONP 虽然能解决跨域但是有一个很大的局限性，那就是只支持 GET 请求，不支持其他类型的请求，而 CORS（跨域源资源共享）（CORS，Cross-origin resource sharing）是一个 W3C 标准，它是一份浏览器技术的规范，提供了 Web 服务从不同网域传来沙盒脚本的方法，以避开浏览器的同源策略，这是 JSONP 模式的现代版。在 Spring 框架中，对于 CORS 也提供了相应的解决方案， SpringBoot 中如何实现 CORS。</p><h2 id="二、如何出现"><a href="#二、如何出现" class="headerlink" title="二、如何出现"></a>二、如何出现</h2><p>启动两个 SpringBoot 项目，分别以 8080 和 8081 端口启动，在其中一个写上如下的 Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;get hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;post hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在另一个中写入一个静态页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.5.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;btnClick()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;get_button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;btnClick2()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;post_button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">btnClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.get(<span class="string">&#x27;http://localhost:8080/hello&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#app&quot;</span>).html(msg);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">btnClick2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.post(<span class="string">&#x27;http://localhost:8080/hello&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#app&quot;</span>).html(msg);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：记得引入 Jquery</p></blockquote><p>在 <a href="http://localhost:8081/hello.html">http://localhost:8081/hello.html</a> 点击任何请求：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200820133233.png" alt="image-20200820133227549"></p><p>可以看到此时已经发生跨域问题</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p>从后端解决，修改 Controller 为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin(origins = &quot;http://localhost:8081&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;post hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin(value = &quot;http://localhost:8081&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;get hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中 origins 与 value 效果一样，看源码可以知道它们互相成为对方的别名</p></blockquote><p>此时已经不会出现跨域问题</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200820134429.png" alt="image-20200820134429094"></p><h2 id="四、加强版解决"><a href="#四、加强版解决" class="headerlink" title="四、加强版解决"></a>四、加强版解决</h2><p>此时，在每一个类或者方法上都使用这个注解，法外狂徒张三都觉得这个太麻烦了</p><p>只需要配置一个实现 <code>WebMvcConfigurer</code> 配置类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>).allowedOrigins(<span class="string">&quot;http://localhost:8081&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>/**</code> 表示本应用的所有方法都会去处理跨域请求；allowedMethods 表示允许通过的请求数；allowedHeaders 则表示允许的请求头。</p></blockquote><h2 id="五、安全问题"><a href="#五、安全问题" class="headerlink" title="五、安全问题"></a>五、安全问题</h2><p>出现了一个王八老本行的问题：通过 Ajax 发送跨域请求，虽然用户体验提高了，但是也有潜在的威胁存在，常见的就是 CSRF（Cross-site request forgery）跨站请求伪造。</p><blockquote><p>一句话：利用我们还在登录的状态，即 Cookie 有效，打开一个正常网站，而这个网站上可能有一个非正常操作 ( 图片，链接等) ，那你就可能已经被攻击。</p></blockquote><p>在信息安全中，我们防御 CSRF 的方法主要是增加 Token，这也是现在大多数防御 CSRF 的方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中自定义异常</title>
      <link href="/2020/08/19/SpringBoot%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/"/>
      <url>/2020/08/19/SpringBoot%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、正常出现异常"><a href="#一、正常出现异常" class="headerlink" title="一、正常出现异常"></a>一、正常出现异常</h2><p>Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/diyError&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;diyError&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819140914.png" alt="image-20200819140914040"></p><blockquote><p>可以看见此错误页是 SpringBoot 提供的，由于我们没有提供 /error 页面，顺便展示我们出现的错误</p></blockquote><h2 id="二、静态页面异常"><a href="#二、静态页面异常" class="headerlink" title="二、静态页面异常"></a>二、静态页面异常</h2><p>在 <code>static</code> 目录下新建一个 <code>error</code> 目录，并在其中新建 404.html 和 500.html：</p><p><code>404.html:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code> 500.html：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>500<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次访问 <a href="http://localhost:8080/diyError">http://localhost:8080/diyError</a></p><p>可以看见已经进入自定义的静态页面了：<br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819142425.png" alt="image-20200819142425408"></p><p>再访问一个不存在的页面：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819142448.png" alt="image-20200819142448711"></p><blockquote><p>注：也可以只定义  4xx.html 与 5xx.html 的静态页面，只要发生 400-499 的状态码或者 500-599 的状态码就对应 4xx.html 与 5xx.html 的结果</p></blockquote><h2 id="三、动态页面异常"><a href="#三、动态页面异常" class="headerlink" title="三、动态页面异常"></a>三、动态页面异常</h2><p>引入 thymeleaf 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>templates</code> 目录下新建一个 <code>error</code> 目录，并在其中新建 404.html、 500.html、 4xx.html、5xx.html ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819144108.png" alt="image-20200819144108160"></p><p>再次访问 <a href="http://localhost:8080/diyError">http://localhost:8080/diyError</a></p><p>可以看见已经进入自定义的动态页面了：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819144234.png" alt="image-20200819144234652"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819144308.png" alt="image-20200819144308646"></p><blockquote><p>优先级：</p><ul><li>如果有 404 的页面，会先找 404.html；如果没有就会找 4xx.html</li><li>如果动态页面和静态页面同时存在，会优先使用动态页面</li></ul><p>完整顺序大概如下：</p><p>发生了500错误 –&gt; 查找动态 500.html 页面 –&gt; 查找静态 500.html  –&gt; 查找动态 5xx.html –&gt; 查找静态 5xx.html</p></blockquote><h2 id="四、SpringBoot-怎么自动配置"><a href="#四、SpringBoot-怎么自动配置" class="headerlink" title="四、SpringBoot 怎么自动配置"></a>四、SpringBoot 怎么自动配置</h2><p>关键类：<code>ErrorMvcAutoConfiguration</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorViewResolverConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">   DefaultErrorViewResolverConfiguration(ApplicationContext applicationContext,</span><br><span class="line">         ResourceProperties resourceProperties) &#123;</span><br><span class="line">      <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">      <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnBean(DispatcherServlet.class)</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean(ErrorViewResolver.class)</span></span><br><span class="line">  <span class="comment">// 默认的错误视图解析器 DefaultErrorViewResolver</span></span><br><span class="line">   <span class="function">DefaultErrorViewResolver <span class="title">conventionErrorViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorViewResolver(<span class="keyword">this</span>.applicationContext, <span class="keyword">this</span>.resourceProperties);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在默认的错误视图解析器 <code>DefaultErrorViewResolver</code> 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">   ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">   <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">      modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果 modelAndView 为空，即没找到对应的具体 404.html，就会用 SERIES_VIEWS.containsKey(status.series())      找 4xx.html </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">   String errorViewName = <span class="string">&quot;error/&quot;</span> + viewName;</span><br><span class="line">   TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line">         <span class="keyword">this</span>.applicationContext);</span><br><span class="line">   <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>判断 error 文件夹下面是否有对应的状态码的文档</li><li>再判断是否有动态页面，即 TemplateAvailabilityProvider</li><li>如果是动态页面，就返回动态页面；否则返回静态页面</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolveResource</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (String location : <span class="keyword">this</span>.resourceProperties.getStaticLocations()) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Resource resource = <span class="keyword">this</span>.applicationContext.getResource(location);</span><br><span class="line">         resource = resource.createRelative(viewName + <span class="string">&quot;.html&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> HtmlResourceView(resource), model);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、自定义异常数据"><a href="#五、自定义异常数据" class="headerlink" title="五、自定义异常数据"></a>五、自定义异常数据</h2><p>在 <code>ErrorMvcAutoConfiguration</code> 中，处理异常数据的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultErrorAttributes <span class="title">errorAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorAttributes();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>DefaultErrorAttributes()</code> 中通过设置参数得到相应的结果</p><p>例如：将 error 中的 5xx.html 改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>5xx<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>path<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>error<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>message<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>timestamp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;timestamp&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>status<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>trace<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;trace&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时仔运行结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200819162419.png" alt="image-20200819162419826"></p><p>再看一下使 <code>DefaultErrorAttributes</code> 生效的条件：</p><blockquote><p>@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</p></blockquote><p>所以只要我们自定义 <code>ErrorAttributes.class</code> 就可以实现自己定义的异常数据处理</p><p>自定义 ErrorAttributes 有两种方式 ：</p><ol><li>直接实现 ErrorAttributes 接口</li><li>继承 DefaultErrorAttributes（推荐），因为 DefaultErrorAttributes 中对异常数据的处理已经完成，开发者可以直接使用。</li></ol><p>新建一个配置类继承 <code>DefaultErrorAttributes</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorConfig</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = <span class="keyword">super</span>.getErrorAttributes(webRequest, options);</span><br><span class="line">        errorAttributes.put(<span class="string">&quot;myerror&quot;</span>, <span class="string">&quot;自定义异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 5xx.html 中加入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>myerror<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myerror&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：可以看到此时的自定义的 error 已经加入</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合JSON</title>
      <link href="/2020/08/18/SpringBoot%E6%95%B4%E5%90%88JSON/"/>
      <url>/2020/08/18/SpringBoot%E6%95%B4%E5%90%88JSON/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Jackson"><a href="#一、Jackson" class="headerlink" title="一、Jackson"></a>一、Jackson</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><p>只要加入普通的 Web 依赖就行，为了方便依然引入 Lombok 和 热部署</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817142417.png" alt="image-20200817142417630"></p><p>打开 Maven 依赖可以看见</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817142731.png" alt="image-20200817142731779"></p><blockquote><p>SpringBoot 自带的就是 jackson</p></blockquote><h3 id="2-SpringBoot中使用"><a href="#2-SpringBoot中使用" class="headerlink" title="2. SpringBoot中使用"></a>2. SpringBoot中使用</h3><p>2.1 建立实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2  Controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(i);</span><br><span class="line">            user.setName(<span class="string">&quot;wang&quot;</span> + i);</span><br><span class="line">            user.setAddress(<span class="string">&quot;shanghai&quot;</span> + i);</span><br><span class="line">            user.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.3 结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817144557.png" alt="image-20200817144557760"></p><h3 id="3-深入了解-Springboot-中的-JSON-转换"><a href="#3-深入了解-Springboot-中的-JSON-转换" class="headerlink" title="3. 深入了解 Springboot 中的 JSON 转换"></a>3. 深入了解 Springboot 中的 JSON 转换</h3><p>思考：</p><ol><li><p>前端传入的 json 数据如何被解析成 Java 对象作为 API入参</p></li><li><p>API 返回结果又如何将 Java 对象解析成 json 格式数据返回给前端</p></li></ol><p>关键类：<code>HttpMessageConverter</code></p><blockquote><p>官方原话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.</span><br></pre></td></tr></table></figure></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817150036.png" alt="image-20200817150036913"></p><p>从 Structure 中可以看见一共有五个方法：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817150448.png" alt="image-20200817150448857"></p><p>canRead：接收到请求时判断是否能读</p><p>canWrite：返回结果时判断是否能写</p><p>getSupportedMediaTypes：获取支持的 MediaType</p><p>read：能读则读</p><p>write：能写则写</p><blockquote><p>注：在前面我们没有写任何配置也能实现转换，是由于其中有缺省配置</p><p>可以在 <code>WebMvcConfigurationSupport </code> 中查看</p></blockquote><h3 id="4-自定义-JSON-配置"><a href="#4-自定义-JSON-配置" class="headerlink" title="4.自定义 JSON 配置"></a>4.自定义 JSON 配置</h3><p>方式一：在需要转换的属性上加上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817152735.png" alt="image-20200817152735887"></p><p>方式二：</p><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MappingJackson2HttpMessageConverter <span class="title">mappingJackson2HttpMessageConverter</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MappingJackson2HttpMessageConverter converter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd-HH:mm:ss&quot;</span>));</span><br><span class="line">        converter.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817154209.png" alt="image-20200817154209854"></p><p>使用下面的配置类也可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter () &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();</span></span><br><span class="line"><span class="comment">//        ObjectMapper objectMapper = new ObjectMapper();</span></span><br><span class="line"><span class="comment">//        objectMapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd-HH:mm:ss&quot;));</span></span><br><span class="line"><span class="comment">//        converter.setObjectMapper(objectMapper);</span></span><br><span class="line"><span class="comment">//        return converter;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ObjectMapper <span class="title">objectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200817154533.png" alt="image-20200817154533630"></p><h3 id="5-Gson-和-Fastjson"><a href="#5-Gson-和-Fastjson" class="headerlink" title="5.Gson 和 Fastjson"></a>5.Gson 和 Fastjson</h3><p>如果想要和 Jackson 一样自定义配置：</p><p>只需要配置：<code>GsonHttpMessageConverter</code> 和 <code>FastJsonHttpMessageConverter</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> JSON </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ControllerAdvice注解的使用</title>
      <link href="/2020/08/18/ControllerAdvice%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/18/ControllerAdvice%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、用法"><a href="#一、用法" class="headerlink" title="一、用法"></a>一、用法</h2><ol><li>处理全局异常</li><li>预设全局数据</li><li>请求参数预处理</li></ol><h2 id="二、处理全局异常"><a href="#二、处理全局异常" class="headerlink" title="二、处理全局异常"></a>二、处理全局异常</h2><p>我们只需要在 <strong>application.properties</strong>中配置：spring.servlet.multipart.max-file-size=1KB</p><p>就可以看见在上传图片时就会报 500 异常：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818200228.png" alt="image-20200818200222467"></p><p>此时我们可以自己自定义处理 这种异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(MaxUploadSizeExceededException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myException</span><span class="params">(MaxUploadSizeExceededException e, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;上传大小限制为1KB&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、预设全局数据"><a href="#三、预设全局数据" class="headerlink" title="三、预设全局数据"></a>三、预设全局数据</h2><p>设置全局变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute(value = &quot;data&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">map</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;wangyi&quot;</span>, <span class="string">&quot;王一&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;wangba&quot;</span>, <span class="string">&quot;王八&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取出设置的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = model.asMap();</span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s + <span class="string">&quot;:&quot;</span> + map.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818203200.png" alt="image-20200818203200239"></p><h2 id="四、请求参数预处理"><a href="#四、请求参数预处理" class="headerlink" title="四、请求参数预处理"></a>四、请求参数预处理</h2><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">book</span><span class="params">(Book book, Author author)</span> </span>&#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(author);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Postman 进行测试：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818204743.png" alt="image-20200818204743394"></p><p>得到最终结果为：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818204824.png" alt="image-20200818204824095"></p><p>当出现相同参数时，并不能分清楚参数属于哪个对象，只能将参数赋值给每一个拥有相同参数的对象</p><p>处理：</p><p>Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">book</span><span class="params">(<span class="meta">@ModelAttribute(&quot;b&quot;)</span> Book book,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="meta">@ModelAttribute(&quot;a&quot;)</span> Author author)</span> </span>&#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(author);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder(&quot;a&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initA</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">&quot;a.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder(&quot;b&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initB</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">&quot;b.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Postman 进行测试：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818205810.png" alt="image-20200818205810853"></p><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200818205832.png" alt="image-20200818205832096"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch入门</title>
      <link href="/2020/08/12/ElasticSearch%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/12/ElasticSearch%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、参考链接"><a href="#一、参考链接" class="headerlink" title="一、参考链接"></a>一、参考链接</h2><p><a href="https://www.elastic.co/cn/">01.ES官网</a></p><p><a href="http://www.iocoder.cn/Spring-Boot/Elasticsearch/">02.Spring Boot Elasticsearch 入门</a></p><p><a href="http://www.iocoder.cn/Fight/Schematic-Elasticsearch-principle/">03.图解 Elasticsearch 原理</a></p><h2 id="二、ElasticSearch概述"><a href="#二、ElasticSearch概述" class="headerlink" title="二、ElasticSearch概述"></a>二、ElasticSearch概述</h2><h2 id="三、Solr和ElasticSearch的对比"><a href="#三、Solr和ElasticSearch的对比" class="headerlink" title="三、Solr和ElasticSearch的对比"></a>三、Solr和ElasticSearch的对比</h2><h2 id="四、ElasticSearch安装"><a href="#四、ElasticSearch安装" class="headerlink" title="四、ElasticSearch安装"></a>四、ElasticSearch安装</h2><h2 id="五、Kibana安装"><a href="#五、Kibana安装" class="headerlink" title="五、Kibana安装"></a>五、Kibana安装</h2><h3 id="5-1-下载"><a href="#5-1-下载" class="headerlink" title="5.1 下载"></a>5.1 下载</h3><blockquote><p><a href="https://www.elastic.co/cn/downloads/kibana">Kibana官方下载地址</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151628.png" alt="image-20200728094906706"></p><p>注：可以在<a href="https://www.elastic.co/downloads/past-releases#kibana">past releases</a>下载老版本</p></blockquote><h3 id="5-2-运行"><a href="#5-2-运行" class="headerlink" title="5.2 运行"></a>5.2 运行</h3><p>解压后进入bin目录运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kibana</span><br></pre></td></tr></table></figure><p>在浏览器打开：</p><p><a href="http://localhost:5601/">http://localhost:5601/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151656.png" alt="image-20200728095343130"></p><h3 id="5-3-汉化"><a href="#5-3-汉化" class="headerlink" title="5.3 汉化"></a>5.3 汉化</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151708.png" alt="image-20200728095941769"></p><p>zh-CN.json是Kibana的汉化包</p><p>再到 kibana.yml 中加入：<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151717.png" alt="image-20200728100108546"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151725.png" alt="image-20200728100208569"></p><h2 id="六、ElasticSearch核心概念"><a href="#六、ElasticSearch核心概念" class="headerlink" title="六、ElasticSearch核心概念"></a>六、ElasticSearch核心概念</h2><h3 id="6-1-与关系型数据库对比"><a href="#6-1-与关系型数据库对比" class="headerlink" title="6.1 与关系型数据库对比"></a>6.1 与关系型数据库对比</h3><blockquote><p><strong>elasticsearch是面向文档，关系型数据库和 elasticsearch 客观的对比！一切都是JSON</strong></p></blockquote><table><thead><tr><th align="center">MySQL</th><th align="center">ElasticSearch</th></tr></thead><tbody><tr><td align="center">数据库（database）</td><td align="center">索引（index）</td></tr><tr><td align="center">表（tables）</td><td align="center">类型（types）</td></tr><tr><td align="center">ES</td><td align="center">文档（documents）</td></tr><tr><td align="center">列（columns）</td><td align="center">字段（fields）</td></tr></tbody></table><p><code>注：</code>其中 types 逐渐被弃用了，8.X将被删除</p><h3 id="6-2-一个🌰："><a href="#6-2-一个🌰：" class="headerlink" title="6.2 一个🌰："></a>6.2 一个🌰：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812151826.png" alt="image-20200728102741475"></p><p>对应上面数据库：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152319.png" alt="image-20200728110933851"></p><h3 id="6-3-设计"><a href="#6-3-设计" class="headerlink" title="6.3 设计"></a>6.3 设计</h3><p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包含多个文档(行)，每个文档中又包含多个字段(列)。</p><p><strong>物理设计：</strong></p><p>elasticsearch 在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移 </p><p>一个人就是一个集群！默认的集群名称就是 elaticsearh</p><p>参考以下：</p><ol><li>云上的集群<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152124.png" alt="image-20200728104645355"></li><li>集群里的盒子<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152218.png" alt="image-20200728104717763"></li><li>节点之间<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152227.png" alt="image-20200728104728531"></li><li>索引里的小方块<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152234.png" alt="image-20200728104741324"></li></ol><p>在 ElasticSearch head 中可以看见默认集群的名字为：<code>elasticsearch</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152244.png" alt="image-20200728105040312"></p><p><strong>逻辑设计：</strong></p><p>一个索引类型中，包含多个文档，比如说文档1，文档2。 当我们索引一篇文档时，可以通过这样的顺序找到它: </p><blockquote><p><code>索引 ----&gt; 类型 ----&gt; 文档ID </code></p></blockquote><p>通过这个组合我们就能索引到某个具体的文档。 注意：ID不必是整数，实际上它是个字符串。</p><h3 id="6-4-文档"><a href="#6-4-文档" class="headerlink" title="6.4 文档"></a>6.4 文档</h3><p>就是我们的<code>一条数据</code></p><p>之前说elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch 中，文档有几个重要属性 :</p><ul><li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含 key：value！</li><li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！就是一个json对象！</li></ul><p>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用， 在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</p><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符串也可以是整型。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型 。</p><h3 id="6-5-类型"><a href="#6-5-类型" class="headerlink" title="6.5 类型"></a>6.5 类型</h3><p>​        类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射， 比如 name 映射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段， 比如新增一个字段，那么elasticsearch是怎么做的呢？elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整型。 但是elasticsearch也可能猜不对， 所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用。</p><h3 id="6-6-索引"><a href="#6-6-索引" class="headerlink" title="6.6 索引"></a>6.6 索引</h3><p>就是<code>数据库</code></p><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。 然后它们被存储到了各个分片上了。 我们来研究下分片是如何工作的。</p><p>一个集群至少有一个节点，而一个节点就是一个elasricsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片 ( primary shard ,又称主分片 ) 构成的，每一个主分片会有一个副本 ( replica shard ,又称复制分片 )</p><p>在 ElasticSearch head 中可以看见刚建立的索引是5个分片：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152341.png" alt="image-20200728111430420"></p><h3 id="6-7-倒排"><a href="#6-7-倒排" class="headerlink" title="6.7 倒排"></a>6.7 倒排</h3><p>elasticsearch使用的是一种称为倒排索引的结构，采用Lucene倒排索作为底层。这种结构适用于快速的全文搜索， 一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例 如，现在有两个文档， 每个文档包含如下内容：</p><blockquote><p>Study every day, good good up to forever           # 文档1包含的内容<br>To forever, study every day, good good up          # 文档2包含的内容</p></blockquote><p>为了创建倒排索引，我们首先要将每个文档拆分成独立的词(或称为词条或者tokens)，然后创建一个包含所有不重 复的词条的排序列表，然后列出每个词条出现在哪个文档</p><table><thead><tr><th align="center">term</th><th align="center">doc_1</th><th align="center">doc_2</th></tr></thead><tbody><tr><td align="center">Study</td><td align="center">√</td><td align="center">X</td></tr><tr><td align="center">To</td><td align="center">X</td><td align="center">√</td></tr><tr><td align="center">every</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">forever</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">day</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">study</td><td align="center">X</td><td align="center">√</td></tr><tr><td align="center">good</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">every</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">to</td><td align="center">√</td><td align="center">X</td></tr><tr><td align="center">up</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><p>现在，我们试图搜索 to forever，只需要查看包含每个词条的文档 <code>score</code></p><table><thead><tr><th align="center">term</th><th align="center">doc_1</th><th align="center">doc_2</th></tr></thead><tbody><tr><td align="center">to</td><td align="center">√</td><td align="center">X</td></tr><tr><td align="center">forever</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">total</td><td align="center">2</td><td align="center">1</td></tr></tbody></table><p>如果没有别的条件，现在，这两个包含关键字的文档都将返回。</p><p>在elasticsearch中， 索引 （库）这个词被频繁使用，这就是术语的使用。 在elasticsearch中，索引被分为多个分片，每份分片是一个Lucene的索引。所以一个elasticsearch索引是由多个Lucene索引组成的。别问为什么，谁让elasticsearch使用Lucene作为底层呢! 如无特指，说起索引都是指elasticsearch 的索引。</p><p>关系图：</p><blockquote><p>一个 ES 索引 —–&gt; 多个分片(shard)</p><p>​                                       一个分片(shard) —–&gt; 一个 Lucene 索引</p><p>一个 ES 索引 —–&gt; —–&gt; 多个 Lucene 索引</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152359.png" alt="image-20200728131631335"></p><h2 id="七、IK分词器"><a href="#七、IK分词器" class="headerlink" title="七、IK分词器"></a>七、IK分词器</h2><h3 id="7-1-分词"><a href="#7-1-分词" class="headerlink" title="7.1 分词"></a>7.1 分词</h3><p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个 词，比如 “我是王八” 会被分为”我”、“是”、“王”、“八”，这显然是不符合要求的，所以我们需要安装中文分词器 IK 来解决这个问题。</p><p>IK 提供了两个分词算法：ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word为最细粒度划分！</p><h3 id="7-2-下载安装"><a href="#7-2-下载安装" class="headerlink" title="7.2 下载安装"></a>7.2 下载安装</h3><p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">IK 分词器下载</a></p><p>安装：解压后放入 plugins 文件夹下</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152413.png" alt="image-20200728133942367"></p><p>重启 ElasticSearch ：看到 IK 分词器已经加载到 ES 里面了</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152418.png" alt="image-20200728134131159"></p><h3 id="7-3-IK-分词器的小🌰："><a href="#7-3-IK-分词器的小🌰：" class="headerlink" title="7.3 IK 分词器的小🌰："></a>7.3 IK 分词器的小🌰：</h3><p>使用 ik_smart 算法：  <code>最少切分</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152424.png" alt="image-20200728135216813"></p><p>使用 ik_max_word 算法：    <code>最细粒度划分</code>：通过字典，找寻所有符合的情况</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152432.png" alt="image-20200728135308880"></p><h3 id="7-4-自行-DIY-字典"><a href="#7-4-自行-DIY-字典" class="headerlink" title="7.4 自行 DIY 字典"></a>7.4 自行 DIY 字典</h3><p>在出现以下情况时：我们需要的是 <code>神魔恋</code> 应该是一个词语，而不应该被分词为 <code>神魔</code> 与 <code>恋</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152455.png" alt="image-20200728140135869"></p><p>在 IK 的 config 目录下，配置 wangba.dic 和 IKAnalyzer.cfg.xml 如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152536.png" alt="image-20200728144840034"></p><p><code>IKAnalyzer.cfg.xml：</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152547.png" alt="image-20200728145037806"></p><p><code>wangba.dic:</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152556.png" alt="image-20200728145105415"></p><p>重启 ES 和 Kibana：已经可以看见 wangba.dic 已经加载进去了</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152607.png" alt="image-20200728144452860"></p><p>此时在Kibana中可以看见：此时 <code>神魔恋</code> 已经是一个词了</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152614.png" alt="image-20200728145311150"></p><h2 id="八、Rest风格"><a href="#八、Rest风格" class="headerlink" title="八、Rest风格"></a>八、Rest风格</h2><h3 id="8-1-Rest命令说明说明"><a href="#8-1-Rest命令说明说明" class="headerlink" title="8.1 Rest命令说明说明"></a>8.1 Rest命令说明说明</h3><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交 互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>基本Rest命令说明：</p><table><thead><tr><th align="center"><strong>method</strong></th><th align="center">url地址</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">PUT</td><td align="center">localhost:9200/索引名称/类型名称/文档id</td><td align="center">创建文档（指定文档id）</td></tr><tr><td align="center">POST</td><td align="center">localhost:9200/索引名称/类型名称</td><td align="center">创建文档（随机文档id）</td></tr><tr><td align="center">_update</td><td align="center">localhost:9200/索引名称/类型名称/文档id/_update</td><td align="center">修改文档</td></tr><tr><td align="center">DELETE</td><td align="center">localhost:9200/索引名称/类型名称/文档id</td><td align="center">删除文档</td></tr><tr><td align="center">GET</td><td align="center">localhost:9200/索引名称/类型名称/文档id</td><td align="center">查询文档通过文档id</td></tr><tr><td align="center">POST</td><td align="center">localhost:9200/索引名称/类型名称/_search</td><td align="center">查询所有数据</td></tr></tbody></table><h3 id="8-2-基本测试"><a href="#8-2-基本测试" class="headerlink" title="8.2 基本测试"></a>8.2 基本测试</h3><p>创建索引：</p><blockquote><p>PUT /索引名称/<del><code>类型名称</code></del>/文档id</p><p>{</p><p>​            请求体</p><p>}</p><p>注：类型即将被弃用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152625.png" alt="image-20200728151356309"></p><p>在 ES head 中可以看见数据已经插入成功：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152637.png" alt="image-20200728151727329"></p><h3 id="8-3-类型"><a href="#8-3-类型" class="headerlink" title="8.3 类型"></a>8.3 类型</h3><table><thead><tr><th align="center"><strong>字符串类型</strong></th><th align="center"><strong>text 、 keyword</strong></th></tr></thead><tbody><tr><td align="center"><strong>数值类型</strong></td><td align="center">long、integer、 short、byte、double、float、half_float、 scaled_float</td></tr><tr><td align="center"><strong>日期类型</strong></td><td align="center">date</td></tr><tr><td align="center"><strong>布尔值类型</strong></td><td align="center">boolean</td></tr><tr><td align="center"><strong>二进制类型</strong></td><td align="center">binary</td></tr></tbody></table><p>自定义类型：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152919.png" alt="image-20200728153315700"></p><p>通过 GET 请求可以看见 test2 索引的信息：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812152926.png" alt="image-20200728153419852"></p><p>自动匹配类型：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153010.png" alt="image-20200728154312363"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153017.png" alt="image-20200728154429831"></p><h3 id="8-4-关于索引的基本操作"><a href="#8-4-关于索引的基本操作" class="headerlink" title="8.4 关于索引的基本操作"></a>8.4 关于索引的基本操作</h3><blockquote><p>增加：如上</p><p>查询：如上</p></blockquote><blockquote><p>修改：如下</p></blockquote><p>方法一：直接覆盖</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153031.png" alt="image-20200728155827534"></p><p>可以看见 version 发生了改变</p><p>方法二：</p><blockquote><p>POST /索引名称/_doc/文档id/__update</p><p>{</p><p>​            请求体</p><p>}</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153102.png" alt="image-20200728160513999"></p><p>可以看见 version 再次发生了改变</p><blockquote><p>删除</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153148.png" alt="image-20200728161148536"></p><h3 id="8-5-关于文档的基本操作"><a href="#8-5-关于文档的基本操作" class="headerlink" title="8.5 关于文档的基本操作"></a>8.5 关于文档的基本操作</h3><p><code>基本操作：</code></p><blockquote><p>增加数据    PUT</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153158.png" alt="image-20200729085012520"></p><blockquote><p>查询数据    GET</p></blockquote><p>方式一：简单的 ID 查询</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153226.png" alt="image-20200729085341564"></p><p>可以看见，推荐使用 <code>GET /索引/_doc/文档ID</code> 来进行操作</p><p>方式二：简单的条件查询</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153621.png" alt="image-20200729091400956"></p><p>可以看见 <code>type</code> 已经被丢弃了</p><blockquote><p>更新数据    POST</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153609.png" alt="image-20200729090204208"></p><p>可以看见，推荐使用 <code>POST /索引/_update/文档ID</code> 来进行操作</p><blockquote><p><code>复杂操作：</code>select (排序、分页、高亮、模糊查询、精准查询 )</p></blockquote><blockquote><p>查询</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153640.png" alt="image-20200729092702190"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153648.png" alt="image-20200729093150116"></p><p>ES 中有 <code>zhangsan</code> 和 <code>zhangshan 008</code> ，通过关键字<code>zhangsan</code> 查询，会将分词后的结果全部查询出来，且每一个都是有 <code>_score</code> 的。</p><blockquote><p>hits：在Java可以得到索引和文档的信息、查询的结果总数、具体文档数据信息（可以通过遍历得到具体的各种信息）</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153700.png" alt="image-20200729094426031"></p><blockquote><p>通过 <code>_source</code> 来指定最后的输出结果</p></blockquote><blockquote><p>排序</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153709.png" alt="image-20200729095730668"></p><blockquote><p>通过 <code>sort</code> 进行排序，用 <code>desc</code> 和 <code>asc</code> 来进行降序和升序</p></blockquote><blockquote><p>分页    /search/{current}/{pagesize}</p></blockquote><p>第一页一个数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153722.png" alt="image-20200729100357807"></p><p>第二页的一个数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153731.png" alt="image-20200729100512315"></p><p>第一页的两个数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153738.png" alt="image-20200729100615639"></p><blockquote><p>bool 值查询</p></blockquote><p><code>must 命令</code> ==  and</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153749.png" alt="image-20200729101211913"></p><p><code>should 命令</code> == or</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153757.png" alt="image-20200729102255051"></p><p>两个都查询到了</p><p><code>must_not 命令</code> ==  not</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153807.png" alt="image-20200729102630406"></p><p><code>filter 命令</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153820.png" alt="image-20200729103629498"></p><blockquote><p>gt：大于  / gte：大于等于 / lt：小于 / lte：小于等于</p></blockquote><p><code>匹配多个条件</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153836.png" alt="image-20200729104255294"></p><p>直接在 <code>tags</code> 中加空格</p><p><code>精确查询</code></p><p>term 查询是直接通过倒排索引指定的词条进行精确的查询</p><ul><li><p>term：直接查询精确的</p></li><li><p>match：使用分词器解析（先分析文档，在通过分析的文档进行查询）</p></li></ul><p>两个类型：</p><p><code>text：</code> 会被分词解析器解析</p><p><code>keyword： </code> 不会被分词解析器解析</p><p>使用 keywod 分词器：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153858.png" alt="image-20200729112314281"></p><p>使用 standard 分词器：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153906.png" alt="image-20200729112353845"></p><p><code>text：</code> 可以看见下面被分词了，所以出现了两个结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153915.png" alt="image-20200729112831873"></p><p><code>keyword： </code> 可以看见下面没有被分词</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153925.png" alt="image-20200729113003169"></p><blockquote><p>高亮查询</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153934.png" alt="image-20200729122744294"></p><h2 id="九、SpringBoot集成ElasticSearch"><a href="#九、SpringBoot集成ElasticSearch" class="headerlink" title="九、SpringBoot集成ElasticSearch"></a>九、SpringBoot集成ElasticSearch</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.6/java-rest-high.html">官方 ES Client 文档</a></p><p>1.依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.找对象</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812153948.png" alt="image-20200729134909854"></p><p>3.分析类中方法</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812154043.png" alt="image-20200729140717144"></p><p>ES 的版本与本机中的版本不一致 </p><p>自行配置 SpringBoot 中的 ES 版本</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812154036.png" alt="image-20200729141538339"></p><p><code>RestClientAutoConfiguration</code> 和 <code>RestClientProperties</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wonderfuleight/blogImg/raw/master//20200812154019.png" alt="image-20200729143842388"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure.elasticsearch.rest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.AuthScope;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.Credentials;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.UsernamePasswordCredentials;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.CredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.BasicCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.PropertyMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestClientConfigurations</span> </span>&#123;</span><br><span class="line">    RestClientConfigurations() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">  <span class="comment">// RestClient  普通客户端</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClientFallbackConfiguration</span> </span>&#123;</span><br><span class="line">        RestClientFallbackConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="function">RestClient <span class="title">elasticsearchRestClient</span><span class="params">(RestClientBuilder builder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> builder.build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(&#123;RestHighLevelClient.class&#125;)</span></span><br><span class="line">  <span class="comment">// RestHighLevelClient  高级客户端</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RestHighLevelClientConfiguration</span> </span>&#123;</span><br><span class="line">        RestHighLevelClientConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="function">RestHighLevelClient <span class="title">elasticsearchRestHighLevelClient</span><span class="params">(RestClientBuilder restClientBuilder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="function">RestClient <span class="title">elasticsearchRestClient</span><span class="params">(RestClientBuilder builder, ObjectProvider&lt;RestHighLevelClient&gt; restHighLevelClient)</span> </span>&#123;</span><br><span class="line">            RestHighLevelClient client = (RestHighLevelClient)restHighLevelClient.getIfUnique();</span><br><span class="line">            <span class="keyword">return</span> client != <span class="keyword">null</span> ? client.getLowLevelClient() : builder.build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">  <span class="comment">// RestClientBuilder</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClientBuilderConfiguration</span> </span>&#123;</span><br><span class="line">        RestClientBuilderConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="function">RestClientBuilder <span class="title">elasticsearchRestClientBuilder</span><span class="params">(RestClientProperties properties, ObjectProvider&lt;RestClientBuilderCustomizer&gt; builderCustomizers)</span> </span>&#123;</span><br><span class="line">            HttpHost[] hosts = (HttpHost[])properties.getUris().stream().map(HttpHost::create).toArray((x$<span class="number">0</span>) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HttpHost[x$<span class="number">0</span>];</span><br><span class="line">            &#125;);</span><br><span class="line">            RestClientBuilder builder = RestClient.builder(hosts);</span><br><span class="line">            PropertyMapper map = PropertyMapper.get();</span><br><span class="line">            map.from(properties::getUsername).whenHasText().to((username) -&gt; &#123;</span><br><span class="line">                CredentialsProvider credentialsProvider = <span class="keyword">new</span> BasicCredentialsProvider();</span><br><span class="line">                Credentials credentials = <span class="keyword">new</span> UsernamePasswordCredentials(properties.getUsername(), properties.getPassword());</span><br><span class="line">                credentialsProvider.setCredentials(AuthScope.ANY, credentials);</span><br><span class="line">                builder.setHttpClientConfigCallback((httpClientBuilder) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            builder.setRequestConfigCallback((requestConfigBuilder) -&gt; &#123;</span><br><span class="line">                properties.getClass();</span><br><span class="line">                map.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis).to(requestConfigBuilder::setConnectTimeout);</span><br><span class="line">                properties.getClass();</span><br><span class="line">                map.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis).to(requestConfigBuilder::setSocketTimeout);</span><br><span class="line">                <span class="keyword">return</span> requestConfigBuilder;</span><br><span class="line">            &#125;);</span><br><span class="line">            builderCustomizers.orderedStream().forEach((customizer) -&gt; &#123;</span><br><span class="line">                customizer.customize(builder);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> builder;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、索引、文档-API-操作"><a href="#十、索引、文档-API-操作" class="headerlink" title="十、索引、文档 API 操作"></a>十、索引、文档 API 操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wangba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.wangba.enity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.util.QueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.MatchAllQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.TermQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.FetchSourceContext;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.ls.LSOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootEsApiApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;restHighLevelClient&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 创建索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建索引请求</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 让客户端执行请求 indicesClient</span></span><br><span class="line">        CreateIndexResponse createIndexResponse = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(createIndexResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 查询索引</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">existIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">      System.out.println(exists);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 删除索引</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">      DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">      AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">      System.out.println(delete);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span>: 添加文档 PUT test/_doc/1</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 创建对象</span></span><br><span class="line">      User user = <span class="keyword">new</span> User(<span class="string">&quot;wangba&quot;</span>, <span class="number">25</span>);</span><br><span class="line">      <span class="comment">// 创建请求</span></span><br><span class="line">      IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">      <span class="comment">// 规则：  ==&gt;   PUT test/_doc/1</span></span><br><span class="line">      request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">      request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">      <span class="comment">// 将我们的数据放入请求中   JSON格式</span></span><br><span class="line">      request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">      <span class="comment">// 客户端发送请求，返回结果</span></span><br><span class="line">        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(indexResponse);</span><br><span class="line">        System.out.println(indexResponse.toString());</span><br><span class="line">        System.out.println(indexResponse.status());   <span class="comment">// 对应的状态就是 CREATED 等</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 文档是否存在</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">existDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// GET test/_doc/1</span></span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="comment">// _source 不显示上下文</span></span><br><span class="line">        request.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">        request.storedFields(<span class="string">&quot;_none_&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> exists = client.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 查询文档数据  GET test/_doc/1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        GetResponse documentFields = client.get(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(documentFields.getSourceAsString());</span><br><span class="line">        System.out.println(documentFields);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 更新文档</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;zhansan&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        request.doc(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">        UpdateResponse update = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(update);</span><br><span class="line">        System.out.println(update.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 删除文档  DELETE test/_doc/1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DeleteResponse delete = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(delete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 批处理请求</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBulkDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;User&gt; userArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userArrayList.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">5</span>));</span><br><span class="line">        userArrayList.add(<span class="keyword">new</span> User(<span class="string">&quot;lisi&quot;</span>, <span class="number">10</span>));</span><br><span class="line">        userArrayList.add(<span class="keyword">new</span> User(<span class="string">&quot;xiaoxin&quot;</span>, <span class="number">25</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userArrayList.size(); i++) &#123;</span><br><span class="line">            bulkRequest.add(</span><br><span class="line">                    <span class="keyword">new</span> IndexRequest(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                    .id(<span class="string">&quot;&quot;</span>+(i+<span class="number">1</span>))</span><br><span class="line">                    .source(JSON.toJSONString(userArrayList.get(i)), XContentType.JSON)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BulkResponse bulk = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(bulk);</span><br><span class="line">        System.out.println(bulk.status());</span><br><span class="line">        System.out.println(bulk.hasFailures());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 按条件搜索</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: wang ba</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/7/29</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        查询：</span></span><br><span class="line"><span class="comment">        SearchRequest          搜索请求</span></span><br><span class="line"><span class="comment">        SearchSourceBuilder    条件构造</span></span><br><span class="line"><span class="comment">        HighlightBuilder       高亮构造</span></span><br><span class="line"><span class="comment">        TermQueryBuilder       精确查询</span></span><br><span class="line"><span class="comment">        MatchAllQueryBuilder   所有查询</span></span><br><span class="line"><span class="comment">        // xxxBuilder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">searchDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建搜索请求</span></span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造搜索条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">// QueryBuilders.termQuery 精确查询</span></span><br><span class="line">        <span class="comment">// QueryBuilders.matchAllQuery 查询所有</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(&quot;age&quot;, &quot;25&quot;);</span></span><br><span class="line">        <span class="comment">//searchSourceBuilder.query(termQueryBuilder);</span></span><br><span class="line"></span><br><span class="line">        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span><br><span class="line">        searchSourceBuilder.query(matchAllQueryBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        <span class="comment">// searchSourceBuilder.from();</span></span><br><span class="line">        <span class="comment">// searchSourceBuilder.size();</span></span><br><span class="line"></span><br><span class="line">        searchSourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">        SearchResponse search = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(JSON.toJSONString(search.getHits()));</span><br><span class="line">        System.out.println(<span class="string">&quot;+++++++++++++我是分割线++++++++++++++&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit documentFields : search.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、实战"><a href="#十一、实战" class="headerlink" title="十一、实战"></a>十一、实战</h2>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
